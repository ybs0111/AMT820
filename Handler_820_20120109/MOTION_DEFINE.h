
#pragma once

//------------------------------------------------------------------
//                 Device Type Defines.
//------------------------------------------------------------------
#ifndef DEVTYPE_EZI_SERVO_PLUS_R_ST
#define	DEVTYPE_EZI_SERVO_PLUS_R_ST			1
#define DEVNAME_EZI_SERVO_PLUS_R_ST			"Ezi-SERVO Plus-R-ST"
#endif

#ifndef DEVTYPE_EZI_MOTIONLINK
#define	DEVTYPE_EZI_MOTIONLINK				10
#define DEVNAME_EZI_MOTIONLINK				"Ezi-MotionLink"
#endif

#ifndef DEVTYPE_EZI_STEP_PLUS_R_ST
#define	DEVTYPE_EZI_STEP_PLUS_R_ST			20
#define DEVNAME_EZI_STEP_PLUS_R_ST			"Ezi-STEP Plus-R-ST"
#endif

#ifndef DEVTYPE_EZI_SERVO_PLUS_R_ALL_ST
#define	DEVTYPE_EZI_SERVO_PLUS_R_ALL_ST			30
#define DEVNAME_EZI_SERVO_PLUS_R_ALL_ST			"Ezi-SERVO Plus-R-ALL"
#endif

#ifndef DEVTYPE_EZI_SERVO_PLUS_R_ALL_ABS
#define	DEVTYPE_EZI_SERVO_PLUS_R_ALL_ABS		35
#define DEVNAME_EZI_SERVO_PLUS_R_ALL_ABS		"Ezi-SERVO Plus-R-ALL Abs"
#endif

#ifndef DEVTYPE_EZI_STEP_PLUS_R_ALL_ST
#define	DEVTYPE_EZI_STEP_PLUS_R_ALL_ST			40
#define DEVNAME_EZI_STEP_PLUS_R_ALL_ST			"Ezi-STEP Plus-R-ALL"
#endif

#ifndef DEVTYPE_EZI_SERVO_PLUS_R_MINI
#define	DEVTYPE_EZI_SERVO_PLUS_R_MINI			50
#define DEVNAME_EZI_SERVO_PLUS_R_MINI			"Ezi-SERVO Plus-R-Mini"
#endif

#ifndef DEVTYPE_EZI_STEP_PLUS_R_MINI
#define	DEVTYPE_EZI_STEP_PLUS_R_MINI			60
#define DEVNAME_EZI_STEP_PLUS_R_MINI			"Ezi-STEP Plus-R-Mini"
#endif

static const int	DIR_INC = 1;
static const int	DIR_DEC = 0;

//------------------------------------------------------------------
//                 Axis Status Flag Defines.
//------------------------------------------------------------------

static const int	MAX_AXIS_STATUS		= 32;

typedef union
{
	DWORD	dwValue;
	struct
	{
		unsigned	FFLAG_ERRORALL			: 1; // = 0x00000001;
		unsigned	FFLAG_HWPOSILMT			: 1; // = 0x00000002;
		unsigned	FFLAG_HWNEGALMT			: 1; // = 0x00000004;
		unsigned	FFLAG_SWPOGILMT			: 1; // = 0x00000008;
		unsigned	FFLAG_SWNEGALMT			: 1; // = 0x00000010;
		unsigned	FFLAG_RESERVED0			: 1; // = 0x00000020;
		unsigned	FFLAG_RESERVED1			: 1; // = 0x00000040;
		unsigned	FFLAG_ERRPOSOVERFLOW	: 1; // = 0x00000080;
		unsigned	FFLAG_ERROVERCURRENT	: 1; // = 0x00000100;
		unsigned	FFLAG_ERROVERSPEED		: 1; // = 0x00000200;
		unsigned	FFLAG_ERRPOSTRACKING	: 1; // = 0x00000400;
		unsigned	FFLAG_ERROVERLOAD		: 1; // = 0x00000800;
		unsigned	FFLAG_ERROVERHEAT		: 1; // = 0x00001000;
		unsigned	FFLAG_ERRBACKEMF		: 1; // = 0x00002000;
		unsigned	FFLAG_ERRMOTORPOWER		: 1; // = 0x00004000;
		unsigned	FFLAG_ERRINPOSITION		: 1; // = 0x00008000;
		unsigned	FFLAG_EMGSTOP			: 1; // = 0x00010000;
		unsigned	FFLAG_SLOWSTOP			: 1; // = 0x00020000;
		unsigned	FFLAG_ORIGINRETURNING	: 1; // = 0x00040000;
		unsigned	FFLAG_INPOSITION		: 1; // = 0x00080000;
		unsigned	FFLAG_SERVOON			: 1; // = 0x00100000;
		unsigned	FFLAG_ALARMRESET		: 1; // = 0x00200000;
		unsigned	FFLAG_PTSTOPPED			: 1; // = 0x00400000;
		unsigned	FFLAG_ORIGINSENSOR		: 1; // = 0x00800000;
		unsigned	FFLAG_ZPULSE			: 1; // = 0x01000000;
		unsigned	FFLAG_ORIGINRETOK		: 1; // = 0x02000000;
		unsigned	FFLAG_MOTIONDIR			: 1; // = 0x04000000;
		unsigned	FFLAG_MOTIONING			: 1; // = 0x08000000;
		unsigned	FFLAG_MOTIONPAUSE		: 1; // = 0x10000000;
		unsigned	FFLAG_MOTIONACCEL		: 1; // = 0x20000000;
		unsigned	FFLAG_MOTIONDECEL		: 1; // = 0x40000000;
		unsigned	FFLAG_MOTIONCONST		: 1; // = 0x80000000;
	};
} EZISERVO_AXISSTATUS;

typedef union
{
	DWORD	dwValue;
	struct
	{
		unsigned	FFLAG_ERRORALL			: 1; // = 0x00000001;
		unsigned	FFLAG_HWPOSILMT			: 1; // = 0x00000002;
		unsigned	FFLAG_HWNEGALMT			: 1; // = 0x00000004;
		unsigned	FFLAG_SWPOGILMT			: 1; // = 0x00000008;
		unsigned	FFLAG_SWNEGALMT			: 1; // = 0x00000010;
		unsigned	FFLAG_RESERVED0			: 1; // = 0x00000020;
		unsigned	FFLAG_RESERVED1			: 1; // = 0x00000040;
		unsigned	FFLAG_ERRSTEPALARM		: 1; // = 0x00000080;
		unsigned	FFLAG_ERROVERCURRENT	: 1; // = 0x00000100;
		unsigned	FFLAG_ERROVERSPEED		: 1; // = 0x00000200;
		unsigned	FFLAG_ERRSTEPOUT		: 1; // = 0x00000400;
		unsigned	FFLAG_RESERVED2			: 1; // = 0x00000800;
		unsigned	FFLAG_ERROVERHEAT		: 1; // = 0x00001000;
		unsigned	FFLAG_ERRBACKEMF		: 1; // = 0x00002000;
		unsigned	FFLAG_ERRMOTORPOWER		: 1; // = 0x00004000;
		unsigned	FFLAG_ERRLOWPOWER		: 1; // = 0x00008000;
		unsigned	FFLAG_EMGSTOP			: 1; // = 0x00010000;
		unsigned	FFLAG_SLOWSTOP			: 1; // = 0x00020000;
		unsigned	FFLAG_ORIGINRETURNING	: 1; // = 0x00040000;
		unsigned	FFLAG_RESERVED3			: 1; // = 0x00080000;
		unsigned	FFLAG_RESERVED4			: 1; // = 0x00100000;
		unsigned	FFLAG_ALARMRESET		: 1; // = 0x00200000;
		unsigned	FFLAG_PTSTOPPED			: 1; // = 0x00400000;
		unsigned	FFLAG_ORIGINSENSOR		: 1; // = 0x00800000;
		unsigned	FFLAG_ZPULSE			: 1; // = 0x01000000;
		unsigned	FFLAG_ORIGINRETOK		: 1; // = 0x02000000;
		unsigned	FFLAG_MOTIONDIR			: 1; // = 0x04000000;
		unsigned	FFLAG_MOTIONING			: 1; // = 0x08000000;
		unsigned	FFLAG_MOTIONPAUSE		: 1; // = 0x10000000;
		unsigned	FFLAG_MOTIONACCEL		: 1; // = 0x20000000;
		unsigned	FFLAG_MOTIONDECEL		: 1; // = 0x40000000;
		unsigned	FFLAG_MOTIONCONST		: 1; // = 0x80000000;
	};
} EZISTEP_AXISSTATUS;

typedef union
{
	DWORD	dwValue;
	struct
	{
		unsigned	FFLAG_ERRSERVOALARM		: 1; // = 0x00000001;
		unsigned	FFLAG_HWPOSILMT			: 1; // = 0x00000002;
		unsigned	FFLAG_HWNEGALMT			: 1; // = 0x00000004;
		unsigned	FFLAG_SWPOGILMT			: 1; // = 0x00000008;
		unsigned	FFLAG_SWNEGALMT			: 1; // = 0x00000010;
		unsigned	FFLAG_RESERVED0			: 1; // = 0x00000020;
		unsigned	FFLAG_RESERVED1			: 1; // = 0x00000040;
		unsigned	FFLAG_RESERVED2			: 1; // = 0x00000080;
		unsigned	FFLAG_RESERVED3			: 1; // = 0x00000100;
		unsigned	FFLAG_RESERVED4			: 1; // = 0x00000200;
		unsigned	FFLAG_RESERVED5			: 1; // = 0x00000400;
		unsigned	FFLAG_RESERVED6			: 1; // = 0x00000800;
		unsigned	FFLAG_RESERVED7			: 1; // = 0x00001000;
		unsigned	FFLAG_RESERVED8			: 1; // = 0x00002000;
		unsigned	FFLAG_RESERVED9			: 1; // = 0x00004000;
		unsigned	FFLAG_RESERVED10		: 1; // = 0x00008000;
		unsigned	FFLAG_EMGSTOP			: 1; // = 0x00010000;
		unsigned	FFLAG_SLOWSTOP			: 1; // = 0x00020000;
		unsigned	FFLAG_ORIGINRETURNING	: 1; // = 0x00040000;
		unsigned	FFLAG_INPOSITION		: 1; // = 0x00080000;
		unsigned	FFLAG_SERVOON			: 1; // = 0x00100000;
		unsigned	FFLAG_ALARMRESET		: 1; // = 0x00200000;
		unsigned	FFLAG_PTSTOPPED			: 1; // = 0x00400000;
		unsigned	FFLAG_ORIGINSENSOR		: 1; // = 0x00800000;
		unsigned	FFLAG_ZPULSE			: 1; // = 0x01000000;
		unsigned	FFLAG_ORIGINRETOK		: 1; // = 0x02000000;
		unsigned	FFLAG_MOTIONDIR			: 1; // = 0x04000000;
		unsigned	FFLAG_MOTIONING			: 1; // = 0x08000000;
		unsigned	FFLAG_MOTIONPAUSE		: 1; // = 0x10000000;
		unsigned	FFLAG_MOTIONACCEL		: 1; // = 0x20000000;
		unsigned	FFLAG_MOTIONDECEL		: 1; // = 0x40000000;
		unsigned	FFLAG_MOTIONCONST		: 1; // = 0x80000000;
	};
} EZIMOTIONLINK_AXISSTATUS;

typedef union
{
	DWORD	dwValue;
	struct
	{
		unsigned	FFLAG_ERRORALL			: 1; // = 0x00000001;
		unsigned	FFLAG_HWPOSILMT			: 1; // = 0x00000002;
		unsigned	FFLAG_HWNEGALMT			: 1; // = 0x00000004;
		unsigned	FFLAG_SWPOGILMT			: 1; // = 0x00000008;
		unsigned	FFLAG_SWNEGALMT			: 1; // = 0x00000010;
		unsigned	FFLAG_RESERVED0			: 1; // = 0x00000020;
		unsigned	FFLAG_RESERVED1			: 1; // = 0x00000040;
		unsigned	FFLAG_ERRPOSOVERFLOW	: 1; // = 0x00000080;
		unsigned	FFLAG_ERROVERCURRENT	: 1; // = 0x00000100;
		unsigned	FFLAG_ERROVERSPEED		: 1; // = 0x00000200;
		unsigned	FFLAG_ERRPOSTRACKING	: 1; // = 0x00000400;
		unsigned	FFLAG_ERROVERLOAD		: 1; // = 0x00000800;
		unsigned	FFLAG_ERROVERHEAT		: 1; // = 0x00001000;
		unsigned	FFLAG_ERRBACKEMF		: 1; // = 0x00002000;
		unsigned	FFLAG_ERRMOTORPOWER		: 1; // = 0x00004000;
		unsigned	FFLAG_ERRINPOSITION		: 1; // = 0x00008000;
		unsigned	FFLAG_EMGSTOP			: 1; // = 0x00010000;
		unsigned	FFLAG_SLOWSTOP			: 1; // = 0x00020000;
		unsigned	FFLAG_ORIGINRETURNING	: 1; // = 0x00040000;
		unsigned	FFLAG_INPOSITION		: 1; // = 0x00080000;
		unsigned	FFLAG_SERVOON			: 1; // = 0x00100000;
		unsigned	FFLAG_ALARMRESET		: 1; // = 0x00200000;
		unsigned	FFLAG_PTSTOPPED			: 1; // = 0x00400000;
		unsigned	FFLAG_ORIGINSENSOR		: 1; // = 0x00800000;
		unsigned	FFLAG_ZPULSE			: 1; // = 0x01000000;
		unsigned	FFLAG_ORIGINRETOK		: 1; // = 0x02000000;
		unsigned	FFLAG_MOTIONDIR			: 1; // = 0x04000000;
		unsigned	FFLAG_MOTIONING			: 1; // = 0x08000000;
		unsigned	FFLAG_MOTIONPAUSE		: 1; // = 0x10000000;
		unsigned	FFLAG_MOTIONACCEL		: 1; // = 0x20000000;
		unsigned	FFLAG_MOTIONDECEL		: 1; // = 0x40000000;
		unsigned	FFLAG_MOTIONCONST		: 1; // = 0x80000000;
	};
} EZISERVO_ALL_AXISSTATUS;

typedef union
{
	DWORD	dwValue;
	struct
	{
		unsigned	FFLAG_ERRORALL			: 1; // = 0x00000001;
		unsigned	FFLAG_HWPOSILMT			: 1; // = 0x00000002;
		unsigned	FFLAG_HWNEGALMT			: 1; // = 0x00000004;
		unsigned	FFLAG_SWPOGILMT			: 1; // = 0x00000008;
		unsigned	FFLAG_SWNEGALMT			: 1; // = 0x00000010;
		unsigned	FFLAG_RESERVED0			: 1; // = 0x00000020;
		unsigned	FFLAG_RESERVED1			: 1; // = 0x00000040;
		unsigned	FFLAG_ERRPOSOVERFLOW	: 1; // = 0x00000080;
		unsigned	FFLAG_ERROVERCURRENT	: 1; // = 0x00000100;
		unsigned	FFLAG_ERROVERSPEED		: 1; // = 0x00000200;
		unsigned	FFLAG_ERRPOSTRACKING	: 1; // = 0x00000400;
		unsigned	FFLAG_ERROVERLOAD		: 1; // = 0x00000800;
		unsigned	FFLAG_ERROVERHEAT		: 1; // = 0x00001000;
		unsigned	FFLAG_ERRBACKEMF		: 1; // = 0x00002000;
		unsigned	FFLAG_ERRMOTORPOWER		: 1; // = 0x00004000;
		unsigned	FFLAG_ERRINPOSITION		: 1; // = 0x00008000;
		unsigned	FFLAG_EMGSTOP			: 1; // = 0x00010000;
		unsigned	FFLAG_SLOWSTOP			: 1; // = 0x00020000;
		unsigned	FFLAG_ORIGINRETURNING	: 1; // = 0x00040000;
		unsigned	FFLAG_INPOSITION		: 1; // = 0x00080000;
		unsigned	FFLAG_SERVOON			: 1; // = 0x00100000;
		unsigned	FFLAG_ALARMRESET		: 1; // = 0x00200000;
		unsigned	FFLAG_PTSTOPPED			: 1; // = 0x00400000;
		unsigned	FFLAG_ORIGINSENSOR		: 1; // = 0x00800000;
		unsigned	FFLAG_ZPULSE			: 1; // = 0x01000000;
		unsigned	FFLAG_ORIGINRETOK		: 1; // = 0x02000000;
		unsigned	FFLAG_MOTIONDIR			: 1; // = 0x04000000;
		unsigned	FFLAG_MOTIONING			: 1; // = 0x08000000;
		unsigned	FFLAG_MOTIONPAUSE		: 1; // = 0x10000000;
		unsigned	FFLAG_MOTIONACCEL		: 1; // = 0x20000000;
		unsigned	FFLAG_MOTIONDECEL		: 1; // = 0x40000000;
		unsigned	FFLAG_MOTIONCONST		: 1; // = 0x80000000;
	};
} EZISERVO_ALL_ABS_AXISSTATUS;

typedef union
{
	DWORD	dwValue;
	struct
	{
		unsigned	FFLAG_ERRORALL			: 1; // = 0x00000001;
		unsigned	FFLAG_HWPOSILMT			: 1; // = 0x00000002;
		unsigned	FFLAG_HWNEGALMT			: 1; // = 0x00000004;
		unsigned	FFLAG_SWPOGILMT			: 1; // = 0x00000008;
		unsigned	FFLAG_SWNEGALMT			: 1; // = 0x00000010;
		unsigned	FFLAG_RESERVED0			: 1; // = 0x00000020;
		unsigned	FFLAG_RESERVED1			: 1; // = 0x00000040;
		unsigned	FFLAG_ERRSTEPALARM		: 1; // = 0x00000080;
		unsigned	FFLAG_ERROVERCURRENT	: 1; // = 0x00000100;
		unsigned	FFLAG_ERROVERSPEED		: 1; // = 0x00000200;
		unsigned	FFLAG_ERRSTEPOUT		: 1; // = 0x00000400;
		unsigned	FFLAG_RESERVED2			: 1; // = 0x00000800;
		unsigned	FFLAG_ERROVERHEAT		: 1; // = 0x00001000;
		unsigned	FFLAG_ERRBACKEMF		: 1; // = 0x00002000;
		unsigned	FFLAG_ERRMOTORPOWER		: 1; // = 0x00004000;
		unsigned	FFLAG_ERRLOWPOWER		: 1; // = 0x00008000;
		unsigned	FFLAG_EMGSTOP			: 1; // = 0x00010000;
		unsigned	FFLAG_SLOWSTOP			: 1; // = 0x00020000;
		unsigned	FFLAG_ORIGINRETURNING	: 1; // = 0x00040000;
		unsigned	FFLAG_RESERVED3			: 1; // = 0x00080000;
		unsigned	FFLAG_RESERVED4			: 1; // = 0x00100000;
		unsigned	FFLAG_ALARMRESET		: 1; // = 0x00200000;
		unsigned	FFLAG_PTSTOPPED			: 1; // = 0x00400000;
		unsigned	FFLAG_ORIGINSENSOR		: 1; // = 0x00800000;
		unsigned	FFLAG_ZPULSE			: 1; // = 0x01000000;
		unsigned	FFLAG_ORIGINRETOK		: 1; // = 0x02000000;
		unsigned	FFLAG_MOTIONDIR			: 1; // = 0x04000000;
		unsigned	FFLAG_MOTIONING			: 1; // = 0x08000000;
		unsigned	FFLAG_MOTIONPAUSE		: 1; // = 0x10000000;
		unsigned	FFLAG_MOTIONACCEL		: 1; // = 0x20000000;
		unsigned	FFLAG_MOTIONDECEL		: 1; // = 0x40000000;
		unsigned	FFLAG_MOTIONCONST		: 1; // = 0x80000000;
	};
} EZISTEP_ALL_AXISSTATUS;

typedef union
{
	DWORD	dwValue;
	struct
	{
		unsigned	FFLAG_ERRORALL			: 1; // = 0x00000001;
		unsigned	FFLAG_HWPOSILMT			: 1; // = 0x00000002;
		unsigned	FFLAG_HWNEGALMT			: 1; // = 0x00000004;
		unsigned	FFLAG_SWPOGILMT			: 1; // = 0x00000008;
		unsigned	FFLAG_SWNEGALMT			: 1; // = 0x00000010;
		unsigned	FFLAG_RESERVED0			: 1; // = 0x00000020;
		unsigned	FFLAG_RESERVED1			: 1; // = 0x00000040;
		unsigned	FFLAG_ERRPOSOVERFLOW	: 1; // = 0x00000080;
		unsigned	FFLAG_ERROVERCURRENT	: 1; // = 0x00000100;
		unsigned	FFLAG_ERROVERSPEED		: 1; // = 0x00000200;
		unsigned	FFLAG_ERRPOSTRACKING	: 1; // = 0x00000400;
		unsigned	FFLAG_ERROVERLOAD		: 1; // = 0x00000800;
		unsigned	FFLAG_ERROVERHEAT		: 1; // = 0x00001000;
		unsigned	FFLAG_ERRBACKEMF		: 1; // = 0x00002000;
		unsigned	FFLAG_ERRMOTORPOWER		: 1; // = 0x00004000;
		unsigned	FFLAG_ERRINPOSITION		: 1; // = 0x00008000;
		unsigned	FFLAG_EMGSTOP			: 1; // = 0x00010000;
		unsigned	FFLAG_SLOWSTOP			: 1; // = 0x00020000;
		unsigned	FFLAG_ORIGINRETURNING	: 1; // = 0x00040000;
		unsigned	FFLAG_INPOSITION		: 1; // = 0x00080000;
		unsigned	FFLAG_SERVOON			: 1; // = 0x00100000;
		unsigned	FFLAG_ALARMRESET		: 1; // = 0x00200000;
		unsigned	FFLAG_PTSTOPPED			: 1; // = 0x00400000;
		unsigned	FFLAG_ORIGINSENSOR		: 1; // = 0x00800000;
		unsigned	FFLAG_ZPULSE			: 1; // = 0x01000000;
		unsigned	FFLAG_ORIGINRETOK		: 1; // = 0x02000000;
		unsigned	FFLAG_MOTIONDIR			: 1; // = 0x04000000;
		unsigned	FFLAG_MOTIONING			: 1; // = 0x08000000;
		unsigned	FFLAG_MOTIONPAUSE		: 1; // = 0x10000000;
		unsigned	FFLAG_MOTIONACCEL		: 1; // = 0x20000000;
		unsigned	FFLAG_MOTIONDECEL		: 1; // = 0x40000000;
		unsigned	FFLAG_MOTIONCONST		: 1; // = 0x80000000;
	};
} EZISERVO_MINI_AXISSTATUS;

typedef union
{
	DWORD	dwValue;
	struct
	{
		unsigned	FFLAG_ERRORALL			: 1; // = 0x00000001;
		unsigned	FFLAG_HWPOSILMT			: 1; // = 0x00000002;
		unsigned	FFLAG_HWNEGALMT			: 1; // = 0x00000004;
		unsigned	FFLAG_SWPOGILMT			: 1; // = 0x00000008;
		unsigned	FFLAG_SWNEGALMT			: 1; // = 0x00000010;
		unsigned	FFLAG_RESERVED0			: 1; // = 0x00000020;
		unsigned	FFLAG_RESERVED1			: 1; // = 0x00000040;
		unsigned	FFLAG_ERRSTEPALARM		: 1; // = 0x00000080;
		unsigned	FFLAG_ERROVERCURRENT	: 1; // = 0x00000100;
		unsigned	FFLAG_ERROVERSPEED		: 1; // = 0x00000200;
		unsigned	FFLAG_ERRSTEPOUT		: 1; // = 0x00000400;
		unsigned	FFLAG_RESERVED2			: 1; // = 0x00000800;
		unsigned	FFLAG_ERROVERHEAT		: 1; // = 0x00001000;
		unsigned	FFLAG_ERRBACKEMF		: 1; // = 0x00002000;
		unsigned	FFLAG_ERRMOTORPOWER		: 1; // = 0x00004000;
		unsigned	FFLAG_ERRLOWPOWER		: 1; // = 0x00008000;
		unsigned	FFLAG_EMGSTOP			: 1; // = 0x00010000;
		unsigned	FFLAG_SLOWSTOP			: 1; // = 0x00020000;
		unsigned	FFLAG_ORIGINRETURNING	: 1; // = 0x00040000;
		unsigned	FFLAG_RESERVED3			: 1; // = 0x00080000;
		unsigned	FFLAG_RESERVED4			: 1; // = 0x00100000;
		unsigned	FFLAG_ALARMRESET		: 1; // = 0x00200000;
		unsigned	FFLAG_PTSTOPPED			: 1; // = 0x00400000;
		unsigned	FFLAG_ORIGINSENSOR		: 1; // = 0x00800000;
		unsigned	FFLAG_ZPULSE			: 1; // = 0x01000000;
		unsigned	FFLAG_ORIGINRETOK		: 1; // = 0x02000000;
		unsigned	FFLAG_MOTIONDIR			: 1; // = 0x04000000;
		unsigned	FFLAG_MOTIONING			: 1; // = 0x08000000;
		unsigned	FFLAG_MOTIONPAUSE		: 1; // = 0x10000000;
		unsigned	FFLAG_MOTIONACCEL		: 1; // = 0x20000000;
		unsigned	FFLAG_MOTIONDECEL		: 1; // = 0x40000000;
		unsigned	FFLAG_MOTIONCONST		: 1; // = 0x80000000;
	};
} EZISTEP_MINI_AXISSTATUS;

//------------------------------------------------------------------
//                 Input/Output Defines.
//------------------------------------------------------------------
// Input Bit-mask list.
static const DWORD	SERVO_IN_BITMASK_LIMITP			= 0x00000001;
static const DWORD	SERVO_IN_BITMASK_LIMITN			= 0x00000002;
static const DWORD	SERVO_IN_BITMASK_ORIGIN			= 0x00000004;
static const DWORD	SERVO_IN_BITMASK_CLEARPOSITION	= 0x00000008;
static const DWORD	SERVO_IN_BITMASK_PTA0			= 0x00000010;
static const DWORD	SERVO_IN_BITMASK_PTA1			= 0x00000020;
static const DWORD	SERVO_IN_BITMASK_PTA2			= 0x00000040;
static const DWORD	SERVO_IN_BITMASK_PTA3			= 0x00000080;
static const DWORD	SERVO_IN_BITMASK_PTA4			= 0x00000100;
static const DWORD	SERVO_IN_BITMASK_PTA5			= 0x00000200;
static const DWORD	SERVO_IN_BITMASK_PTA6			= 0x00000400;
static const DWORD	SERVO_IN_BITMASK_PTA7			= 0x00000800;
static const DWORD	SERVO_IN_BITMASK_PTSTART		= 0x00001000;
static const DWORD	SERVO_IN_BITMASK_STOP			= 0x00002000;
static const DWORD	SERVO_IN_BITMASK_PJOG			= 0x00004000;
static const DWORD	SERVO_IN_BITMASK_NJOG			= 0x00008000;
static const DWORD	SERVO_IN_BITMASK_ALARMRESET		= 0x00010000;
static const DWORD	SERVO_IN_BITMASK_SERVOON		= 0x00020000;
static const DWORD	SERVO_IN_BITMASK_PAUSE			= 0x00040000;
static const DWORD	SERVO_IN_BITMASK_ORIGINSEARCH	= 0x00080000;
static const DWORD	SERVO_IN_BITMASK_TEACHING		= 0x00100000;
static const DWORD	SERVO_IN_BITMASK_ESTOP			= 0x00200000;
static const DWORD	SERVO_IN_BITMASK_JPTIN0			= 0x00400000;
static const DWORD	SERVO_IN_BITMASK_JPTIN1			= 0x00800000;
static const DWORD	SERVO_IN_BITMASK_JPTIN2			= 0x01000000;
static const DWORD	SERVO_IN_BITMASK_JPTSTART		= 0x02000000;
static const DWORD	SERVO_IN_BITMASK_USERIN0		= 0x04000000;
static const DWORD	SERVO_IN_BITMASK_USERIN1		= 0x08000000;
static const DWORD	SERVO_IN_BITMASK_USERIN2		= 0x10000000;
static const DWORD	SERVO_IN_BITMASK_USERIN3		= 0x20000000;
static const DWORD	SERVO_IN_BITMASK_USERIN4		= 0x40000000;
static const DWORD	SERVO_IN_BITMASK_USERIN5		= 0x80000000;

// Output Bit-mask list.
static const DWORD	SERVO_OUT_BITMASK_COMPAREOUT	= 0x00000001;
static const DWORD	SERVO_OUT_BITMASK_INPOSITION	= 0x00000002;
static const DWORD	SERVO_OUT_BITMASK_ALARM			= 0x00000004;
static const DWORD	SERVO_OUT_BITMASK_MOVING		= 0x00000008;
static const DWORD	SERVO_OUT_BITMASK_ACCDEC		= 0x00000010;
static const DWORD	SERVO_OUT_BITMASK_ACK			= 0x00000020;
static const DWORD	SERVO_OUT_BITMASK_END			= 0x00000040;
static const DWORD	SERVO_OUT_BITMASK_ALARMBLINK	= 0x00000080;
static const DWORD	SERVO_OUT_BITMASK_ORGSEARCHOK	= 0x00000100;
static const DWORD	SERVO_OUT_BITMASK_SERVOREADY	= 0x00000200;
//static const DWORD	SERVO_OUT_BITMASK_RESERVED	= 0x00000400;
static const DWORD	SERVO_OUT_BITMASK_BRAKE			= 0x00000800;
static const DWORD	SERVO_OUT_BITMASK_PTOUT0		= 0x00001000;
static const DWORD	SERVO_OUT_BITMASK_PTOUT1		= 0x00002000;
static const DWORD	SERVO_OUT_BITMASK_PTOUT2		= 0x00004000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT0		= 0x00008000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT1		= 0x00010000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT2		= 0x00020000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT3		= 0x00040000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT4		= 0x00080000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT5		= 0x00100000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT6		= 0x00200000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT7		= 0x00400000;
static const DWORD	SERVO_OUT_BITMASK_USEROUT8		= 0x00800000;

// Input Bit-mask list.
static const DWORD	STEP_IN_BITMASK_LIMITP			= 0x00000001;
static const DWORD	STEP_IN_BITMASK_LIMITN			= 0x00000002;
static const DWORD	STEP_IN_BITMASK_ORIGIN			= 0x00000004;
static const DWORD	STEP_IN_BITMASK_CLEARPOSITION	= 0x00000008;
static const DWORD	STEP_IN_BITMASK_PTA0			= 0x00000010;
static const DWORD	STEP_IN_BITMASK_PTA1			= 0x00000020;
static const DWORD	STEP_IN_BITMASK_PTA2			= 0x00000040;
static const DWORD	STEP_IN_BITMASK_PTA3			= 0x00000080;
static const DWORD	STEP_IN_BITMASK_PTA4			= 0x00000100;
static const DWORD	STEP_IN_BITMASK_PTA5			= 0x00000200;
static const DWORD	STEP_IN_BITMASK_PTA6			= 0x00000400;
static const DWORD	STEP_IN_BITMASK_PTA7			= 0x00000800;
static const DWORD	STEP_IN_BITMASK_PTSTART			= 0x00001000;
static const DWORD	STEP_IN_BITMASK_STOP			= 0x00002000;
static const DWORD	STEP_IN_BITMASK_PJOG			= 0x00004000;
static const DWORD	STEP_IN_BITMASK_NJOG			= 0x00008000;
static const DWORD	STEP_IN_BITMASK_ALARMRESET		= 0x00010000;
//static const DWORD	STEP_IN_BITMASK_RESERVED	= 0x00020000;
static const DWORD	STEP_IN_BITMASK_PAUSE			= 0x00040000;
static const DWORD	STEP_IN_BITMASK_ORIGINSEARCH	= 0x00080000;
static const DWORD	STEP_IN_BITMASK_TEACHING		= 0x00100000;
static const DWORD	STEP_IN_BITMASK_ESTOP			= 0x00200000;
static const DWORD	STEP_IN_BITMASK_JPTIN0			= 0x00400000;
static const DWORD	STEP_IN_BITMASK_JPTIN1			= 0x00800000;
static const DWORD	STEP_IN_BITMASK_JPTIN2			= 0x01000000;
static const DWORD	STEP_IN_BITMASK_JPTSTART		= 0x02000000;
static const DWORD	STEP_IN_BITMASK_USERIN0			= 0x04000000;
static const DWORD	STEP_IN_BITMASK_USERIN1			= 0x08000000;
static const DWORD	STEP_IN_BITMASK_USERIN2			= 0x10000000;
static const DWORD	STEP_IN_BITMASK_USERIN3			= 0x20000000;
static const DWORD	STEP_IN_BITMASK_USERIN4			= 0x40000000;
static const DWORD	STEP_IN_BITMASK_USERIN5			= 0x80000000;

// Output Bit-mask list.
static const DWORD	STEP_OUT_BITMASK_COMPAREOUT		= 0x00000001;
//static const DWORD	STEP_OUT_BITMASK_RESERVED	= 0x00000002;
static const DWORD	STEP_OUT_BITMASK_ALARM			= 0x00000004;
static const DWORD	STEP_OUT_BITMASK_RUNSTOP		= 0x00000008;
static const DWORD	STEP_OUT_BITMASK_ACCDEC			= 0x00000010;
static const DWORD	STEP_OUT_BITMASK_ACK			= 0x00000020;
static const DWORD	STEP_OUT_BITMASK_END			= 0x00000040;
static const DWORD	STEP_OUT_BITMASK_ALARMBLINK		= 0x00000080;
static const DWORD	STEP_OUT_BITMASK_ORGSEARCHOK	= 0x00000100;
//static const DWORD	STEP_OUT_BITMASK_RESERVED	= 0x00000200;
//static const DWORD	STEP_OUT_BITMASK_RESERVED	= 0x00000400;
static const DWORD	STEP_OUT_BITMASK_BRAKE			= 0x00000800;
static const DWORD	STEP_OUT_BITMASK_PTOUT0			= 0x00001000;
static const DWORD	STEP_OUT_BITMASK_PTOUT1			= 0x00002000;
static const DWORD	STEP_OUT_BITMASK_PTOUT2			= 0x00004000;
static const DWORD	STEP_OUT_BITMASK_USEROUT0		= 0x00008000;
static const DWORD	STEP_OUT_BITMASK_USEROUT1		= 0x00010000;
static const DWORD	STEP_OUT_BITMASK_USEROUT2		= 0x00020000;
static const DWORD	STEP_OUT_BITMASK_USEROUT3		= 0x00040000;
static const DWORD	STEP_OUT_BITMASK_USEROUT4		= 0x00080000;
static const DWORD	STEP_OUT_BITMASK_USEROUT5		= 0x00100000;
static const DWORD	STEP_OUT_BITMASK_USEROUT6		= 0x00200000;
static const DWORD	STEP_OUT_BITMASK_USEROUT7		= 0x00400000;
static const DWORD	STEP_OUT_BITMASK_USEROUT8		= 0x00800000;

// Input Bit-mask list.
static const DWORD	MOTIONLINK_IN_BITMASK_LIMITP		= 0x00000001;
static const DWORD	MOTIONLINK_IN_BITMASK_LIMITN		= 0x00000002;
static const DWORD	MOTIONLINK_IN_BITMASK_ORIGIN		= 0x00000004;
static const DWORD	MOTIONLINK_IN_BITMASK_CLEARPOSITION	= 0x00000008;
static const DWORD	MOTIONLINK_IN_BITMASK_PTA0			= 0x00000010;
static const DWORD	MOTIONLINK_IN_BITMASK_PTA1			= 0x00000020;
static const DWORD	MOTIONLINK_IN_BITMASK_PTA2			= 0x00000040;
static const DWORD	MOTIONLINK_IN_BITMASK_PTA3			= 0x00000080;
static const DWORD	MOTIONLINK_IN_BITMASK_PTA4			= 0x00000100;
static const DWORD	MOTIONLINK_IN_BITMASK_PTA5			= 0x00000200;
//static const DWORD	MOTIONLINK_IN_BITMASK_RESERVED	= 0x00000400;
//static const DWORD	MOTIONLINK_IN_BITMASK_RESERVED	= 0x00000800;
static const DWORD	MOTIONLINK_IN_BITMASK_PTSTART		= 0x00001000;
static const DWORD	MOTIONLINK_IN_BITMASK_STOP			= 0x00002000;
static const DWORD	MOTIONLINK_IN_BITMASK_PJOG			= 0x00004000;
static const DWORD	MOTIONLINK_IN_BITMASK_NJOG			= 0x00008000;
static const DWORD	MOTIONLINK_IN_BITMASK_ALARMRESET	= 0x00010000;
static const DWORD	MOTIONLINK_IN_BITMASK_SERVOON		= 0x00020000;
static const DWORD	MOTIONLINK_IN_BITMASK_PAUSE			= 0x00040000;
static const DWORD	MOTIONLINK_IN_BITMASK_ORIGINSEARCH	= 0x00080000;
static const DWORD	MOTIONLINK_IN_BITMASK_TEACHING		= 0x00100000;
static const DWORD	MOTIONLINK_IN_BITMASK_ESTOP			= 0x00200000;
static const DWORD	MOTIONLINK_IN_BITMASK_JPTIN0		= 0x00400000;
static const DWORD	MOTIONLINK_IN_BITMASK_JPTIN1		= 0x00800000;
static const DWORD	MOTIONLINK_IN_BITMASK_JPTIN2		= 0x01000000;
static const DWORD	MOTIONLINK_IN_BITMASK_JPTSTART		= 0x02000000;
static const DWORD	MOTIONLINK_IN_BITMASK_USERIN0		= 0x04000000;
static const DWORD	MOTIONLINK_IN_BITMASK_USERIN1		= 0x08000000;
static const DWORD	MOTIONLINK_IN_BITMASK_USERIN2		= 0x10000000;
static const DWORD	MOTIONLINK_IN_BITMASK_USERIN3		= 0x20000000;
static const DWORD	MOTIONLINK_IN_BITMASK_USERIN4		= 0x40000000;
static const DWORD	MOTIONLINK_IN_BITMASK_USERIN5		= 0x80000000;

// Output Bit-mask list.
static const DWORD	MOTIONLINK_OUT_BITMASK_COMPAREOUT	= 0x00000001;
static const DWORD	MOTIONLINK_OUT_BITMASK_INPOSITION	= 0x00000002;
static const DWORD	MOTIONLINK_OUT_BITMASK_ALARM		= 0x00000004;
static const DWORD	MOTIONLINK_OUT_BITMASK_MOVING		= 0x00000008;
static const DWORD	MOTIONLINK_OUT_BITMASK_ACCDEC		= 0x00000010;
static const DWORD	MOTIONLINK_OUT_BITMASK_ACK			= 0x00000020;
static const DWORD	MOTIONLINK_OUT_BITMASK_END			= 0x00000040;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00000080;
static const DWORD	MOTIONLINK_OUT_BITMASK_ORGSEARCHOK	= 0x00000100;
static const DWORD	MOTIONLINK_OUT_BITMASK_SERVOREADY	= 0x00000200;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00000400;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00000800;
static const DWORD	MOTIONLINK_OUT_BITMASK_PTOUT0		= 0x00001000;
static const DWORD	MOTIONLINK_OUT_BITMASK_PTOUT1		= 0x00002000;
static const DWORD	MOTIONLINK_OUT_BITMASK_PTOUT2		= 0x00004000;
static const DWORD	MOTIONLINK_OUT_BITMASK_USEROUT0		= 0x00008000;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00010000;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00020000;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00040000;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00080000;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00100000;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00200000;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00400000;
//static const DWORD	MOTIONLINK_OUT_BITMASK_RESERVED	= 0x00800000;

// Input Bit-mask list.
static const DWORD	SERVO_ALL_IN_BITMASK_LIMITP			= 0x00000001;
static const DWORD	SERVO_ALL_IN_BITMASK_LIMITN			= 0x00000002;
static const DWORD	SERVO_ALL_IN_BITMASK_ORIGIN			= 0x00000004;
static const DWORD	SERVO_ALL_IN_BITMASK_CLEARPOSITION	= 0x00000008;
static const DWORD	SERVO_ALL_IN_BITMASK_PTA0			= 0x00000010;
static const DWORD	SERVO_ALL_IN_BITMASK_PTA1			= 0x00000020;
static const DWORD	SERVO_ALL_IN_BITMASK_PTA2			= 0x00000040;
static const DWORD	SERVO_ALL_IN_BITMASK_PTA3			= 0x00000080;
static const DWORD	SERVO_ALL_IN_BITMASK_PTA4			= 0x00000100;
static const DWORD	SERVO_ALL_IN_BITMASK_PTA5			= 0x00000200;
//static const DWORD	SERVO_ALL_IN_BITMASK_RESERVED	= 0x00000400;
//static const DWORD	SERVO_ALL_IN_BITMASK_RESERVED	= 0x00000800;
static const DWORD	SERVO_ALL_IN_BITMASK_PTSTART		= 0x00001000;
static const DWORD	SERVO_ALL_IN_BITMASK_STOP			= 0x00002000;
static const DWORD	SERVO_ALL_IN_BITMASK_PJOG			= 0x00004000;
static const DWORD	SERVO_ALL_IN_BITMASK_NJOG			= 0x00008000;
static const DWORD	SERVO_ALL_IN_BITMASK_ALARMRESET		= 0x00010000;
static const DWORD	SERVO_ALL_IN_BITMASK_SERVOON		= 0x00020000;
static const DWORD	SERVO_ALL_IN_BITMASK_PAUSE			= 0x00040000;
static const DWORD	SERVO_ALL_IN_BITMASK_ORIGINSEARCH	= 0x00080000;
static const DWORD	SERVO_ALL_IN_BITMASK_TEACHING		= 0x00100000;
static const DWORD	SERVO_ALL_IN_BITMASK_ESTOP			= 0x00200000;
static const DWORD	SERVO_ALL_IN_BITMASK_JPTIN0			= 0x00400000;
static const DWORD	SERVO_ALL_IN_BITMASK_JPTIN1			= 0x00800000;
static const DWORD	SERVO_ALL_IN_BITMASK_JPTIN2			= 0x01000000;
static const DWORD	SERVO_ALL_IN_BITMASK_JPTSTART		= 0x02000000;
static const DWORD	SERVO_ALL_IN_BITMASK_USERIN0		= 0x04000000;
static const DWORD	SERVO_ALL_IN_BITMASK_USERIN1		= 0x08000000;
static const DWORD	SERVO_ALL_IN_BITMASK_USERIN2		= 0x10000000;
static const DWORD	SERVO_ALL_IN_BITMASK_USERIN3		= 0x20000000;
static const DWORD	SERVO_ALL_IN_BITMASK_USERIN4		= 0x40000000;
static const DWORD	SERVO_ALL_IN_BITMASK_USERIN5		= 0x80000000;

// Output Bit-mask list.
static const DWORD	SERVO_ALL_OUT_BITMASK_COMPAREOUT	= 0x00000001;
static const DWORD	SERVO_ALL_OUT_BITMASK_INPOSITION	= 0x00000002;
static const DWORD	SERVO_ALL_OUT_BITMASK_ALARM			= 0x00000004;
static const DWORD	SERVO_ALL_OUT_BITMASK_MOVING		= 0x00000008;
static const DWORD	SERVO_ALL_OUT_BITMASK_ACCDEC		= 0x00000010;
static const DWORD	SERVO_ALL_OUT_BITMASK_ACK			= 0x00000020;
static const DWORD	SERVO_ALL_OUT_BITMASK_END			= 0x00000040;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00000080;
static const DWORD	SERVO_ALL_OUT_BITMASK_ORGSEARCHOK	= 0x00000100;
static const DWORD	SERVO_ALL_OUT_BITMASK_SERVOREADY	= 0x00000200;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00000400;
static const DWORD	SERVO_ALL_OUT_BITMASK_BRAKE			= 0x00000800;
static const DWORD	SERVO_ALL_OUT_BITMASK_PTOUT0		= 0x00001000;
static const DWORD	SERVO_ALL_OUT_BITMASK_PTOUT1		= 0x00002000;
static const DWORD	SERVO_ALL_OUT_BITMASK_PTOUT2		= 0x00004000;
static const DWORD	SERVO_ALL_OUT_BITMASK_USEROUT0		= 0x00008000;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00010000;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00020000;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00040000;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00080000;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00100000;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00200000;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00400000;
//static const DWORD	SERVO_ALL_OUT_BITMASK_RESERVED	= 0x00800000;


// Input Bit-mask list.
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_LIMITP			= 0x00000001;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_LIMITN			= 0x00000002;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_ORIGIN			= 0x00000004;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_CLEARPOSITION	= 0x00000008;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PTA0			= 0x00000010;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PTA1			= 0x00000020;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PTA2			= 0x00000040;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PTA3			= 0x00000080;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PTA4			= 0x00000100;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PTA5			= 0x00000200;
//static const DWORD	SERVO_ALL_ABS_IN_BITMASK_RESERVED	= 0x00000400;
//static const DWORD	SERVO_ALL_ABS_IN_BITMASK_RESERVED	= 0x00000800;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PTSTART		= 0x00001000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_STOP			= 0x00002000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PJOG			= 0x00004000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_NJOG			= 0x00008000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_ALARMRESET		= 0x00010000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_SERVOON		= 0x00020000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_PAUSE			= 0x00040000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_ORIGINSEARCH	= 0x00080000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_TEACHING		= 0x00100000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_ESTOP			= 0x00200000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_JPTIN0			= 0x00400000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_JPTIN1			= 0x00800000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_JPTIN2			= 0x01000000;
static const DWORD	SERVO_ALL_ABS_IN_BITMASK_JPTSTART		= 0x02000000;
//static const DWORD	SERVO_ALL_ABS_IN_BITMASK_RESERVED	= 0x04000000;
//static const DWORD	SERVO_ALL_ABS_IN_BITMASK_RESERVED	= 0x08000000;
//static const DWORD	SERVO_ALL_ABS_IN_BITMASK_RESERVED	= 0x10000000;
//static const DWORD	SERVO_ALL_ABS_IN_BITMASK_RESERVED	= 0x20000000;
//static const DWORD	SERVO_ALL_ABS_IN_BITMASK_RESERVED	= 0x40000000;
//static const DWORD	SERVO_ALL_ABS_IN_BITMASK_RESERVED	= 0x80000000;

// Output Bit-mask list.
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_COMPAREOUT	= 0x00000001;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_INPOSITION	= 0x00000002;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_ALARM			= 0x00000004;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_MOVING		= 0x00000008;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_ACCDEC		= 0x00000010;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_ACK			= 0x00000020;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_END			= 0x00000040;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00000080;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_ORGSEARCHOK	= 0x00000100;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_SERVOREADY	= 0x00000200;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00000400;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_BRAKE			= 0x00000800;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_PTOUT0		= 0x00001000;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_PTOUT1		= 0x00002000;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_PTOUT2		= 0x00004000;
static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_PTOUT3		= 0x00008000;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00010000;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00020000;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00040000;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00080000;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00100000;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00200000;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00400000;
//static const DWORD	SERVO_ALL_ABS_OUT_BITMASK_RESERVED	= 0x00800000;

// Input Bit-mask list.
static const DWORD	STEP_ALL_IN_BITMASK_LIMITP			= 0x00000001;
static const DWORD	STEP_ALL_IN_BITMASK_LIMITN			= 0x00000002;
static const DWORD	STEP_ALL_IN_BITMASK_ORIGIN			= 0x00000004;
static const DWORD	STEP_ALL_IN_BITMASK_CLEARPOSITION	= 0x00000008;
static const DWORD	STEP_ALL_IN_BITMASK_PTA0			= 0x00000010;
static const DWORD	STEP_ALL_IN_BITMASK_PTA1			= 0x00000020;
static const DWORD	STEP_ALL_IN_BITMASK_PTA2			= 0x00000040;
static const DWORD	STEP_ALL_IN_BITMASK_PTA3			= 0x00000080;
static const DWORD	STEP_ALL_IN_BITMASK_PTA4			= 0x00000100;
static const DWORD	STEP_ALL_IN_BITMASK_PTA5			= 0x00000200;
//static const DWORD	STEP_ALL_IN_BITMASK_RESERVED	= 0x00000400;
//static const DWORD	STEP_ALL_IN_BITMASK_RESERVED	= 0x00000800;
static const DWORD	STEP_ALL_IN_BITMASK_PTSTART			= 0x00001000;
static const DWORD	STEP_ALL_IN_BITMASK_STOP			= 0x00002000;
static const DWORD	STEP_ALL_IN_BITMASK_PJOG			= 0x00004000;
static const DWORD	STEP_ALL_IN_BITMASK_NJOG			= 0x00008000;
static const DWORD	STEP_ALL_IN_BITMASK_ALARMRESET		= 0x00010000;
//static const DWORD	STEP_ALL_IN_BITMASK_RESERVED	= 0x00020000;
static const DWORD	STEP_ALL_IN_BITMASK_PAUSE			= 0x00040000;
static const DWORD	STEP_ALL_IN_BITMASK_ORIGINSEARCH	= 0x00080000;
static const DWORD	STEP_ALL_IN_BITMASK_TEACHING		= 0x00100000;
static const DWORD	STEP_ALL_IN_BITMASK_ESTOP			= 0x00200000;
static const DWORD	STEP_ALL_IN_BITMASK_JPTIN0			= 0x00400000;
static const DWORD	STEP_ALL_IN_BITMASK_JPTIN1			= 0x00800000;
static const DWORD	STEP_ALL_IN_BITMASK_JPTIN2			= 0x01000000;
static const DWORD	STEP_ALL_IN_BITMASK_JPTSTART		= 0x02000000;
static const DWORD	STEP_ALL_IN_BITMASK_USERIN0			= 0x04000000;
static const DWORD	STEP_ALL_IN_BITMASK_USERIN1			= 0x08000000;
static const DWORD	STEP_ALL_IN_BITMASK_USERIN2			= 0x10000000;
static const DWORD	STEP_ALL_IN_BITMASK_USERIN3			= 0x20000000;
static const DWORD	STEP_ALL_IN_BITMASK_USERIN4			= 0x40000000;
static const DWORD	STEP_ALL_IN_BITMASK_USERIN5			= 0x80000000;

// Output Bit-mask list.
static const DWORD	STEP_ALL_OUT_BITMASK_COMPAREOUT		= 0x00000001;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00000002;
static const DWORD	STEP_ALL_OUT_BITMASK_ALARM			= 0x00000004;
static const DWORD	STEP_ALL_OUT_BITMASK_RUNSTOP		= 0x00000008;
static const DWORD	STEP_ALL_OUT_BITMASK_ACCDEC			= 0x00000010;
static const DWORD	STEP_ALL_OUT_BITMASK_ACK			= 0x00000020;
static const DWORD	STEP_ALL_OUT_BITMASK_END			= 0x00000040;
static const DWORD	STEP_ALL_OUT_BITMASK_ALARMBLINK		= 0x00000080;
static const DWORD	STEP_ALL_OUT_BITMASK_ORGSEARCHOK	= 0x00000100;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00000200;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00000400;
static const DWORD	STEP_ALL_OUT_BITMASK_BRAKE			= 0x00000800;
static const DWORD	STEP_ALL_OUT_BITMASK_PTOUT0			= 0x00001000;
static const DWORD	STEP_ALL_OUT_BITMASK_PTOUT1			= 0x00002000;
static const DWORD	STEP_ALL_OUT_BITMASK_PTOUT2			= 0x00004000;
static const DWORD	STEP_ALL_OUT_BITMASK_USEROUT0		= 0x00008000;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00010000;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00020000;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00040000;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00080000;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00100000;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00200000;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00400000;
//static const DWORD	STEP_ALL_OUT_BITMASK_RESERVED	= 0x00800000;

// Input Bit-mask list.
static const DWORD	SERVO_MINI_IN_BITMASK_LIMITP		= 0x00000001;
static const DWORD	SERVO_MINI_IN_BITMASK_LIMITN		= 0x00000002;
static const DWORD	SERVO_MINI_IN_BITMASK_ORIGIN		= 0x00000004;
static const DWORD	SERVO_MINI_IN_BITMASK_CLEARPOSITION	= 0x00000008;
static const DWORD	SERVO_MINI_IN_BITMASK_PTA0			= 0x00000010;
static const DWORD	SERVO_MINI_IN_BITMASK_PTA1			= 0x00000020;
static const DWORD	SERVO_MINI_IN_BITMASK_PTA2			= 0x00000040;
static const DWORD	SERVO_MINI_IN_BITMASK_PTA3			= 0x00000080;
static const DWORD	SERVO_MINI_IN_BITMASK_PTA4			= 0x00000100;
static const DWORD	SERVO_MINI_IN_BITMASK_PTA5			= 0x00000200;
//static const DWORD	SERVO_MINI_IN_BITMASK_RESERVED	= 0x00000400;
//static const DWORD	SERVO_MINI_IN_BITMASK_RESERVED	= 0x00000800;
static const DWORD	SERVO_MINI_IN_BITMASK_PTSTART		= 0x00001000;
static const DWORD	SERVO_MINI_IN_BITMASK_STOP			= 0x00002000;
static const DWORD	SERVO_MINI_IN_BITMASK_PJOG			= 0x00004000;
static const DWORD	SERVO_MINI_IN_BITMASK_NJOG			= 0x00008000;
static const DWORD	SERVO_MINI_IN_BITMASK_ALARMRESET	= 0x00010000;
static const DWORD	SERVO_MINI_IN_BITMASK_SERVOON		= 0x00020000;
static const DWORD	SERVO_MINI_IN_BITMASK_PAUSE			= 0x00040000;
static const DWORD	SERVO_MINI_IN_BITMASK_ORIGINSEARCH	= 0x00080000;
static const DWORD	SERVO_MINI_IN_BITMASK_TEACHING		= 0x00100000;
static const DWORD	SERVO_MINI_IN_BITMASK_ESTOP			= 0x00200000;
static const DWORD	SERVO_MINI_IN_BITMASK_JPTIN0		= 0x00400000;
static const DWORD	SERVO_MINI_IN_BITMASK_JPTIN1		= 0x00800000;
static const DWORD	SERVO_MINI_IN_BITMASK_JPTIN2		= 0x01000000;
static const DWORD	SERVO_MINI_IN_BITMASK_JPTSTART		= 0x02000000;
static const DWORD	SERVO_MINI_IN_BITMASK_USERIN0		= 0x04000000;
static const DWORD	SERVO_MINI_IN_BITMASK_USERIN1		= 0x08000000;
static const DWORD	SERVO_MINI_IN_BITMASK_USERIN2		= 0x10000000;
static const DWORD	SERVO_MINI_IN_BITMASK_USERIN3		= 0x20000000;
static const DWORD	SERVO_MINI_IN_BITMASK_USERIN4		= 0x40000000;
static const DWORD	SERVO_MINI_IN_BITMASK_USERIN5		= 0x80000000;

// Output Bit-mask list.
static const DWORD	SERVO_MINI_OUT_BITMASK_COMPAREOUT	= 0x00000001;
static const DWORD	SERVO_MINI_OUT_BITMASK_INPOSITION	= 0x00000002;
static const DWORD	SERVO_MINI_OUT_BITMASK_ALARM		= 0x00000004;
static const DWORD	SERVO_MINI_OUT_BITMASK_MOVING		= 0x00000008;
static const DWORD	SERVO_MINI_OUT_BITMASK_ACCDEC		= 0x00000010;
static const DWORD	SERVO_MINI_OUT_BITMASK_ACK			= 0x00000020;
static const DWORD	SERVO_MINI_OUT_BITMASK_END			= 0x00000040;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00000080;
static const DWORD	SERVO_MINI_OUT_BITMASK_ORGSEARCHOK	= 0x00000100;
static const DWORD	SERVO_MINI_OUT_BITMASK_SERVOREADY	= 0x00000200;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00000400;
static const DWORD	SERVO_MINI_OUT_BITMASK_BRAKE		= 0x00000800;
static const DWORD	SERVO_MINI_OUT_BITMASK_PTOUT0		= 0x00001000;
static const DWORD	SERVO_MINI_OUT_BITMASK_PTOUT1		= 0x00002000;
static const DWORD	SERVO_MINI_OUT_BITMASK_PTOUT2		= 0x00004000;
static const DWORD	SERVO_MINI_OUT_BITMASK_USEROUT0		= 0x00008000;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00010000;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00020000;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00040000;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00080000;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00100000;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00200000;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00400000;
//static const DWORD	SERVO_MINI_OUT_BITMASK_RESERVED	= 0x00800000;

// Input Bit-mask list.
static const DWORD	STEP_MINI_IN_BITMASK_LIMITP			= 0x00000001;
static const DWORD	STEP_MINI_IN_BITMASK_LIMITN			= 0x00000002;
static const DWORD	STEP_MINI_IN_BITMASK_ORIGIN			= 0x00000004;
static const DWORD	STEP_MINI_IN_BITMASK_CLEARPOSITION	= 0x00000008;
static const DWORD	STEP_MINI_IN_BITMASK_PTA0			= 0x00000010;
static const DWORD	STEP_MINI_IN_BITMASK_PTA1			= 0x00000020;
static const DWORD	STEP_MINI_IN_BITMASK_PTA2			= 0x00000040;
static const DWORD	STEP_MINI_IN_BITMASK_PTA3			= 0x00000080;
static const DWORD	STEP_MINI_IN_BITMASK_PTA4			= 0x00000100;
static const DWORD	STEP_MINI_IN_BITMASK_PTA5			= 0x00000200;
//static const DWORD	STEP_MINI_IN_BITMASK_RESERVED	= 0x00000400;
//static const DWORD	STEP_MINI_IN_BITMASK_RESERVED	= 0x00000800;
static const DWORD	STEP_MINI_IN_BITMASK_PTSTART		= 0x00001000;
static const DWORD	STEP_MINI_IN_BITMASK_STOP			= 0x00002000;
static const DWORD	STEP_MINI_IN_BITMASK_PJOG			= 0x00004000;
static const DWORD	STEP_MINI_IN_BITMASK_NJOG			= 0x00008000;
static const DWORD	STEP_MINI_IN_BITMASK_ALARMRESET		= 0x00010000;
//static const DWORD	STEP_MINI_IN_BITMASK_RESERVED	= 0x00020000;
static const DWORD	STEP_MINI_IN_BITMASK_PAUSE			= 0x00040000;
static const DWORD	STEP_MINI_IN_BITMASK_ORIGINSEARCH	= 0x00080000;
static const DWORD	STEP_MINI_IN_BITMASK_TEACHING		= 0x00100000;
static const DWORD	STEP_MINI_IN_BITMASK_ESTOP			= 0x00200000;
static const DWORD	STEP_MINI_IN_BITMASK_JPTIN0			= 0x00400000;
static const DWORD	STEP_MINI_IN_BITMASK_JPTIN1			= 0x00800000;
static const DWORD	STEP_MINI_IN_BITMASK_JPTIN2			= 0x01000000;
static const DWORD	STEP_MINI_IN_BITMASK_JPTSTART		= 0x02000000;
static const DWORD	STEP_MINI_IN_BITMASK_USERIN0		= 0x04000000;
static const DWORD	STEP_MINI_IN_BITMASK_USERIN1		= 0x08000000;
static const DWORD	STEP_MINI_IN_BITMASK_USERIN2		= 0x10000000;
static const DWORD	STEP_MINI_IN_BITMASK_USERIN3		= 0x20000000;
static const DWORD	STEP_MINI_IN_BITMASK_USERIN4		= 0x40000000;
static const DWORD	STEP_MINI_IN_BITMASK_USERIN5		= 0x80000000;

// Output Bit-mask list.
static const DWORD	STEP_MINI_OUT_BITMASK_COMPAREOUT	= 0x00000001;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00000002;
static const DWORD	STEP_MINI_OUT_BITMASK_ALARM			= 0x00000004;
static const DWORD	STEP_MINI_OUT_BITMASK_RUNSTOP		= 0x00000008;
static const DWORD	STEP_MINI_OUT_BITMASK_ACCDEC		= 0x00000010;
static const DWORD	STEP_MINI_OUT_BITMASK_ACK			= 0x00000020;
static const DWORD	STEP_MINI_OUT_BITMASK_END			= 0x00000040;
static const DWORD	STEP_MINI_OUT_BITMASK_ALARMBLINK	= 0x00000080;
static const DWORD	STEP_MINI_OUT_BITMASK_ORGSEARCHOK	= 0x00000100;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00000200;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00000400;
static const DWORD	STEP_MINI_OUT_BITMASK_BRAKE			= 0x00000800;
static const DWORD	STEP_MINI_OUT_BITMASK_PTOUT0		= 0x00001000;
static const DWORD	STEP_MINI_OUT_BITMASK_PTOUT1		= 0x00002000;
static const DWORD	STEP_MINI_OUT_BITMASK_PTOUT2		= 0x00004000;
static const DWORD	STEP_MINI_OUT_BITMASK_USEROUT0		= 0x00008000;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00010000;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00020000;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00040000;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00080000;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00100000;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00200000;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00400000;
//static const DWORD	STEP_MINI_OUT_BITMASK_RESERVED	= 0x00800000;

//------------------------------------------------------------------
//                 Input/Output Assigning Defines.
//------------------------------------------------------------------
static const BYTE	LEVEL_LOW_ACTIVE	= 0;
static const BYTE	LEVEL_HIGH_ACTIVE	= 1;

static const BYTE	IN_LOGIC_NONE	= 0;
static const BYTE	OUT_LOGIC_NONE	= 0;

typedef enum
{
	SERVO_IN_PREASSIGN_LIMITP = 1,
	SERVO_IN_PREASSIGN_LIMITN,
	SERVO_IN_PREASSIGN_ORIGIN,

	SERVO_IN_LOGIC_CLEARPOSITION,
	SERVO_IN_LOGIC_PTA0,
	SERVO_IN_LOGIC_PTA1,
	SERVO_IN_LOGIC_PTA2,
	SERVO_IN_LOGIC_PTA3,
	SERVO_IN_LOGIC_PTA4,
	SERVO_IN_LOGIC_PTA5,
	SERVO_IN_LOGIC_PTA6,
	SERVO_IN_LOGIC_PTA7,
	SERVO_IN_LOGIC_PTSTART,
	SERVO_IN_LOGIC_STOP,
	SERVO_IN_LOGIC_PJOG,
	SERVO_IN_LOGIC_NJOG,
	SERVO_IN_LOGIC_ALARMRESET,
	SERVO_IN_LOGIC_SERVOON,
	SERVO_IN_LOGIC_PAUSE,
	SERVO_IN_LOGIC_ORIGINSEARCH,
	SERVO_IN_LOGIC_TEACHING,
	SERVO_IN_LOGIC_ESTOP,
	SERVO_IN_LOGIC_JPTIN0,
	SERVO_IN_LOGIC_JPTIN1,
	SERVO_IN_LOGIC_JPTIN2,
	SERVO_IN_LOGIC_JPTSTART,
	SERVO_IN_LOGIC_USERIN0,
	SERVO_IN_LOGIC_USERIN1,
	SERVO_IN_LOGIC_USERIN2,
	SERVO_IN_LOGIC_USERIN3,
	SERVO_IN_LOGIC_USERIN4,
	SERVO_IN_LOGIC_USERIN5
} EZISERVO_INLOGIC_LIST;

typedef enum
{
	STEP_IN_PREASSIGN_LIMITP = 1,
	STEP_IN_PREASSIGN_LIMITN,
	STEP_IN_PREASSIGN_ORIGIN,

	STEP_IN_LOGIC_CLEARPOSITION,
	STEP_IN_LOGIC_PTA0,
	STEP_IN_LOGIC_PTA1,
	STEP_IN_LOGIC_PTA2,
	STEP_IN_LOGIC_PTA3,
	STEP_IN_LOGIC_PTA4,
	STEP_IN_LOGIC_PTA5,
	STEP_IN_LOGIC_PTA6,
	STEP_IN_LOGIC_PTA7,
	STEP_IN_LOGIC_PTSTART,
	STEP_IN_LOGIC_STOP,
	STEP_IN_LOGIC_PJOG,
	STEP_IN_LOGIC_NJOG,
	STEP_IN_LOGIC_ALARMRESET,
	STEP_IN_LOGIC_RESERVED0,
	STEP_IN_LOGIC_PAUSE,
	STEP_IN_LOGIC_ORIGINSEARCH,
	STEP_IN_LOGIC_TEACHING,
	STEP_IN_LOGIC_ESTOP,
	STEP_IN_LOGIC_JPTIN0,
	STEP_IN_LOGIC_JPTIN1,
	STEP_IN_LOGIC_JPTIN2,
	STEP_IN_LOGIC_JPTSTART,
	STEP_IN_LOGIC_USERIN0,
	STEP_IN_LOGIC_USERIN1,
	STEP_IN_LOGIC_USERIN2,
	STEP_IN_LOGIC_USERIN3,
	STEP_IN_LOGIC_USERIN4,
	STEP_IN_LOGIC_USERIN5
} EZISTEP_INLOGIC_LIST;

typedef enum
{
	MOTIONLINK_IN_PREASSIGN_LIMITP = 1,
	MOTIONLINK_IN_PREASSIGN_LIMITN,
	MOTIONLINK_IN_PREASSIGN_ORIGIN,

	MOTIONLINK_IN_LOGIC_CLEARPOSITION,
	MOTIONLINK_IN_LOGIC_PTA0,
	MOTIONLINK_IN_LOGIC_PTA1,
	MOTIONLINK_IN_LOGIC_PTA2,
	MOTIONLINK_IN_LOGIC_PTA3,
	MOTIONLINK_IN_LOGIC_PTA4,
	MOTIONLINK_IN_LOGIC_PTA5,
	MOTIONLINK_IN_LOGIC_RESERVED0,
	MOTIONLINK_IN_LOGIC_RESERVED1,
	MOTIONLINK_IN_LOGIC_PTSTART,
	MOTIONLINK_IN_LOGIC_STOP,
	MOTIONLINK_IN_LOGIC_PJOG,
	MOTIONLINK_IN_LOGIC_NJOG,
	MOTIONLINK_IN_LOGIC_ALARMRESET,
	MOTIONLINK_IN_LOGIC_SERVOON,
	MOTIONLINK_IN_LOGIC_PAUSE,
	MOTIONLINK_IN_LOGIC_ORIGINSEARCH,
	MOTIONLINK_IN_LOGIC_TEACHING,
	MOTIONLINK_IN_LOGIC_ESTOP,
	MOTIONLINK_IN_LOGIC_JPTIN0,
	MOTIONLINK_IN_LOGIC_JPTIN1,
	MOTIONLINK_IN_LOGIC_JPTIN2,
	MOTIONLINK_IN_LOGIC_JPTSTART,
	MOTIONLINK_IN_LOGIC_USERIN0,
	MOTIONLINK_IN_LOGIC_USERIN1,
	MOTIONLINK_IN_LOGIC_USERIN2,
	MOTIONLINK_IN_LOGIC_USERIN3,
	MOTIONLINK_IN_LOGIC_USERIN4,
	MOTIONLINK_IN_LOGIC_USERIN5
} EZIMOTIONLINK_INLOGIC_LIST;

typedef enum
{
	SERVO_ALL_IN_PREASSIGN_LIMITP = 1,
	SERVO_ALL_IN_PREASSIGN_LIMITN,
	SERVO_ALL_IN_PREASSIGN_ORIGIN,

	SERVO_ALL_IN_LOGIC_CLEARPOSITION,
	SERVO_ALL_IN_LOGIC_PTA0,
	SERVO_ALL_IN_LOGIC_PTA1,
	SERVO_ALL_IN_LOGIC_PTA2,
	SERVO_ALL_IN_LOGIC_PTA3,
	SERVO_ALL_IN_LOGIC_PTA4,
	SERVO_ALL_IN_LOGIC_PTA5,
	SERVO_ALL_IN_LOGIC_RESERVED0,
	SERVO_ALL_IN_LOGIC_RESERVED1,
	SERVO_ALL_IN_LOGIC_PTSTART,
	SERVO_ALL_IN_LOGIC_STOP,
	SERVO_ALL_IN_LOGIC_PJOG,
	SERVO_ALL_IN_LOGIC_NJOG,
	SERVO_ALL_IN_LOGIC_ALARMRESET,
	SERVO_ALL_IN_LOGIC_SERVOON,
	SERVO_ALL_IN_LOGIC_PAUSE,
	SERVO_ALL_IN_LOGIC_ORIGINSEARCH,
	SERVO_ALL_IN_LOGIC_TEACHING,
	SERVO_ALL_IN_LOGIC_ESTOP,
	SERVO_ALL_IN_LOGIC_JPTIN0,
	SERVO_ALL_IN_LOGIC_JPTIN1,
	SERVO_ALL_IN_LOGIC_JPTIN2,
	SERVO_ALL_IN_LOGIC_JPTSTART,
	SERVO_ALL_IN_LOGIC_USERIN0,
	SERVO_ALL_IN_LOGIC_USERIN1,
	SERVO_ALL_IN_LOGIC_USERIN2,
	SERVO_ALL_IN_LOGIC_USERIN3,
	SERVO_ALL_IN_LOGIC_USERIN4,
	SERVO_ALL_IN_LOGIC_USERIN5
} EZISERVO_ALL_INLOGIC_LIST;

typedef enum
{
	SERVO_ALL_ABS_IN_PREASSIGN_LIMITP = 1,
	SERVO_ALL_ABS_IN_PREASSIGN_LIMITN,
	SERVO_ALL_ABS_IN_PREASSIGN_ORIGIN,

	SERVO_ALL_ABS_IN_LOGIC_CLEARPOSITION,
	SERVO_ALL_ABS_IN_LOGIC_PTA0,
	SERVO_ALL_ABS_IN_LOGIC_PTA1,
	SERVO_ALL_ABS_IN_LOGIC_PTA2,
	SERVO_ALL_ABS_IN_LOGIC_PTA3,
	SERVO_ALL_ABS_IN_LOGIC_PTA4,
	SERVO_ALL_ABS_IN_LOGIC_PTA5,
	SERVO_ALL_ABS_IN_LOGIC_RESERVED0,
	SERVO_ALL_ABS_IN_LOGIC_RESERVED1,
	SERVO_ALL_ABS_IN_LOGIC_PTSTART,
	SERVO_ALL_ABS_IN_LOGIC_STOP,
	SERVO_ALL_ABS_IN_LOGIC_PJOG,
	SERVO_ALL_ABS_IN_LOGIC_NJOG,
	SERVO_ALL_ABS_IN_LOGIC_ALARMRESET,
	SERVO_ALL_ABS_IN_LOGIC_SERVOON,
	SERVO_ALL_ABS_IN_LOGIC_PAUSE,
	SERVO_ALL_ABS_IN_LOGIC_ORIGINSEARCH,
	SERVO_ALL_ABS_IN_LOGIC_TEACHING,
	SERVO_ALL_ABS_IN_LOGIC_ESTOP,
	SERVO_ALL_ABS_IN_LOGIC_JPTIN0,
	SERVO_ALL_ABS_IN_LOGIC_JPTIN1,
	SERVO_ALL_ABS_IN_LOGIC_JPTIN2,
	SERVO_ALL_ABS_IN_LOGIC_JPTSTART,
	SERVO_ALL_ABS_IN_LOGIC_RESERVED2,
	SERVO_ALL_ABS_IN_LOGIC_RESERVED3,
	SERVO_ALL_ABS_IN_LOGIC_RESERVED4,
	SERVO_ALL_ABS_IN_LOGIC_RESERVED5,
	SERVO_ALL_ABS_IN_LOGIC_RESERVED6,
	SERVO_ALL_ABS_IN_LOGIC_RESERVED7
} EZISERVO_ALL_ABS_INLOGIC_LIST;

typedef enum
{
	STEP_ALL_IN_PREASSIGN_LIMITP = 1,
	STEP_ALL_IN_PREASSIGN_LIMITN,
	STEP_ALL_IN_PREASSIGN_ORIGIN,

	STEP_ALL_IN_LOGIC_CLEARPOSITION,
	STEP_ALL_IN_LOGIC_PTA0,
	STEP_ALL_IN_LOGIC_PTA1,
	STEP_ALL_IN_LOGIC_PTA2,
	STEP_ALL_IN_LOGIC_PTA3,
	STEP_ALL_IN_LOGIC_PTA4,
	STEP_ALL_IN_LOGIC_PTA5,
	STEP_ALL_IN_LOGIC_RESERVED0,
	STEP_ALL_IN_LOGIC_RESERVED1,
	STEP_ALL_IN_LOGIC_PTSTART,
	STEP_ALL_IN_LOGIC_STOP,
	STEP_ALL_IN_LOGIC_PJOG,
	STEP_ALL_IN_LOGIC_NJOG,
	STEP_ALL_IN_LOGIC_ALARMRESET,
	STEP_ALL_IN_LOGIC_RESERVED2,
	STEP_ALL_IN_LOGIC_PAUSE,
	STEP_ALL_IN_LOGIC_ORIGINSEARCH,
	STEP_ALL_IN_LOGIC_TEACHING,
	STEP_ALL_IN_LOGIC_ESTOP,
	STEP_ALL_IN_LOGIC_JPTIN0,
	STEP_ALL_IN_LOGIC_JPTIN1,
	STEP_ALL_IN_LOGIC_JPTIN2,
	STEP_ALL_IN_LOGIC_JPTSTART,
	STEP_ALL_IN_LOGIC_USERIN0,
	STEP_ALL_IN_LOGIC_USERIN1,
	STEP_ALL_IN_LOGIC_USERIN2,
	STEP_ALL_IN_LOGIC_USERIN3,
	STEP_ALL_IN_LOGIC_USERIN4,
	STEP_ALL_IN_LOGIC_USERIN5
} EZISTEP_ALL_INLOGIC_LIST;

typedef enum
{
	SERVO_MINI_IN_PREASSIGN_LIMITP = 1,
	SERVO_MINI_IN_PREASSIGN_LIMITN,
	SERVO_MINI_IN_PREASSIGN_ORIGIN,

	SERVO_MINI_IN_LOGIC_CLEARPOSITION,
	SERVO_MINI_IN_LOGIC_PTA0,
	SERVO_MINI_IN_LOGIC_PTA1,
	SERVO_MINI_IN_LOGIC_PTA2,
	SERVO_MINI_IN_LOGIC_PTA3,
	SERVO_MINI_IN_LOGIC_PTA4,
	SERVO_MINI_IN_LOGIC_PTA5,
	SERVO_MINI_IN_LOGIC_RESERVED0,
	SERVO_MINI_IN_LOGIC_RESERVED1,
	SERVO_MINI_IN_LOGIC_PTSTART,
	SERVO_MINI_IN_LOGIC_STOP,
	SERVO_MINI_IN_LOGIC_PJOG,
	SERVO_MINI_IN_LOGIC_NJOG,
	SERVO_MINI_IN_LOGIC_ALARMRESET,
	SERVO_MINI_IN_LOGIC_SERVOON,
	SERVO_MINI_IN_LOGIC_PAUSE,
	SERVO_MINI_IN_LOGIC_ORIGINSEARCH,
	SERVO_MINI_IN_LOGIC_TEACHING,
	SERVO_MINI_IN_LOGIC_ESTOP,
	SERVO_MINI_IN_LOGIC_JPTIN0,
	SERVO_MINI_IN_LOGIC_JPTIN1,
	SERVO_MINI_IN_LOGIC_JPTIN2,
	SERVO_MINI_IN_LOGIC_JPTSTART,
	SERVO_MINI_IN_LOGIC_USERIN0,
	SERVO_MINI_IN_LOGIC_USERIN1,
	SERVO_MINI_IN_LOGIC_USERIN2,
	SERVO_MINI_IN_LOGIC_USERIN3,
	SERVO_MINI_IN_LOGIC_USERIN4,
	SERVO_MINI_IN_LOGIC_USERIN5
} EZISERVO_MINI_INLOGIC_LIST;

typedef enum
{
	STEP_MINI_IN_PREASSIGN_LIMITP = 1,
	STEP_MINI_IN_PREASSIGN_LIMITN,
	STEP_MINI_IN_PREASSIGN_ORIGIN,

	STEP_MINI_IN_LOGIC_CLEARPOSITION,
	STEP_MINI_IN_LOGIC_PTA0,
	STEP_MINI_IN_LOGIC_PTA1,
	STEP_MINI_IN_LOGIC_PTA2,
	STEP_MINI_IN_LOGIC_PTA3,
	STEP_MINI_IN_LOGIC_PTA4,
	STEP_MINI_IN_LOGIC_PTA5,
	STEP_MINI_IN_LOGIC_RESERVED0,
	STEP_MINI_IN_LOGIC_RESERVED1,
	STEP_MINI_IN_LOGIC_PTSTART,
	STEP_MINI_IN_LOGIC_STOP,
	STEP_MINI_IN_LOGIC_PJOG,
	STEP_MINI_IN_LOGIC_NJOG,
	STEP_MINI_IN_LOGIC_ALARMRESET,
	STEP_MINI_IN_LOGIC_RESERVED2,
	STEP_MINI_IN_LOGIC_PAUSE,
	STEP_MINI_IN_LOGIC_ORIGINSEARCH,
	STEP_MINI_IN_LOGIC_TEACHING,
	STEP_MINI_IN_LOGIC_ESTOP,
	STEP_MINI_IN_LOGIC_JPTIN0,
	STEP_MINI_IN_LOGIC_JPTIN1,
	STEP_MINI_IN_LOGIC_JPTIN2,
	STEP_MINI_IN_LOGIC_JPTSTART,
	STEP_MINI_IN_LOGIC_USERIN0,
	STEP_MINI_IN_LOGIC_USERIN1,
	STEP_MINI_IN_LOGIC_USERIN2,
	STEP_MINI_IN_LOGIC_USERIN3,
	STEP_MINI_IN_LOGIC_USERIN4,
	STEP_MINI_IN_LOGIC_USERIN5
} EZISTEP_MINI_INLOGIC_LIST;

typedef enum
{
	SERVO_OUT_PREASSIGN_COMP = 1,

	SERVO_OUT_LOGIC_INPOSITION,
	SERVO_OUT_LOGIC_ALARM,
	SERVO_OUT_LOGIC_MOVING,
	SERVO_OUT_LOGIC_ACCDEC,
	SERVO_OUT_LOGIC_ACK,
	SERVO_OUT_LOGIC_END,
	SERVO_OUT_LOGIC_ALARMBLINK,
	SERVO_OUT_LOGIC_ORGSEARCHOK,
	SERVO_OUT_LOGIC_SERVOREADY,
	SERVO_OUT_LOGIC_RESERVED0,
	SERVO_OUT_LOGIC_BRAKE,
	SERVO_OUT_LOGIC_PTOUT0,
	SERVO_OUT_LOGIC_PTOUT1,
	SERVO_OUT_LOGIC_PTOUT2,
	SERVO_OUT_LOGIC_USEROUT0,
	SERVO_OUT_LOGIC_USEROUT1,
	SERVO_OUT_LOGIC_USEROUT2,
	SERVO_OUT_LOGIC_USEROUT3,
	SERVO_OUT_LOGIC_USEROUT4,
	SERVO_OUT_LOGIC_USEROUT5,
	SERVO_OUT_LOGIC_USEROUT6,
	SERVO_OUT_LOGIC_USEROUT7,
	SERVO_OUT_LOGIC_USEROUT8
} EZISERVO_OUTLOGIC_LIST;

typedef enum
{
	STEP_OUT_PREASSIGN_COMP = 1,

	STEP_OUT_LOGIC_RESERVED0,
	STEP_OUT_LOGIC_ALARM,
	STEP_OUT_LOGIC_RUNSTOP,
	STEP_OUT_LOGIC_ACCDEC,
	STEP_OUT_LOGIC_ACK,
	STEP_OUT_LOGIC_END,
	STEP_OUT_LOGIC_ALARMBLINK,
	STEP_OUT_LOGIC_ORGSEARCHOK,
	STEP_OUT_LOGIC_RESERVED1,
	STEP_OUT_LOGIC_RESERVED2,
	STEP_OUT_LOGIC_BRAKE,
	STEP_OUT_LOGIC_PTOUT0,
	STEP_OUT_LOGIC_PTOUT1,
	STEP_OUT_LOGIC_PTOUT2,
	STEP_OUT_LOGIC_USEROUT0,
	STEP_OUT_LOGIC_USEROUT1,
	STEP_OUT_LOGIC_USEROUT2,
	STEP_OUT_LOGIC_USEROUT3,
	STEP_OUT_LOGIC_USEROUT4,
	STEP_OUT_LOGIC_USEROUT5,
	STEP_OUT_LOGIC_USEROUT6,
	STEP_OUT_LOGIC_USEROUT7,
	STEP_OUT_LOGIC_USEROUT8
} EZISTEP_OUTLOGIC_LIST;

typedef enum
{
	MOTIONLINK_OUT_PREASSIGN_COMP = 1,

	MOTIONLINK_OUT_LOGIC_INPOSITION,
	MOTIONLINK_OUT_LOGIC_ALARM,
	MOTIONLINK_OUT_LOGIC_MOVING,
	MOTIONLINK_OUT_LOGIC_ACCDEC,
	MOTIONLINK_OUT_LOGIC_ACK,
	MOTIONLINK_OUT_LOGIC_END,
	MOTIONLINK_OUT_LOGIC_RESERVED0,
	MOTIONLINK_OUT_LOGIC_ORGSEARCHOK,
	MOTIONLINK_OUT_LOGIC_SERVOREADY,
	MOTIONLINK_OUT_LOGIC_RESERVED1,
	MOTIONLINK_OUT_LOGIC_RESERVED2,
	MOTIONLINK_OUT_LOGIC_PTOUT0,
	MOTIONLINK_OUT_LOGIC_PTOUT1,
	MOTIONLINK_OUT_LOGIC_PTOUT2,
	MOTIONLINK_OUT_LOGIC_USEROUT0,
	MOTIONLINK_OUT_LOGIC_RESERVED3,
	MOTIONLINK_OUT_LOGIC_RESERVED4,
	MOTIONLINK_OUT_LOGIC_RESERVED5,
	MOTIONLINK_OUT_LOGIC_RESERVED6,
	MOTIONLINK_OUT_LOGIC_RESERVED7,
	MOTIONLINK_OUT_LOGIC_RESERVED8,
	MOTIONLINK_OUT_LOGIC_RESERVED9,
	MOTIONLINK_OUT_LOGIC_RESERVED10
} EZIMOTIONLINK_OUTLOGIC_LIST;

typedef enum
{
	SERVO_ALL_OUT_PREASSIGN_COMP = 1,

	SERVO_ALL_OUT_LOGIC_INPOSITION,
	SERVO_ALL_OUT_LOGIC_ALARM,
	SERVO_ALL_OUT_LOGIC_MOVING,
	SERVO_ALL_OUT_LOGIC_ACCDEC,
	SERVO_ALL_OUT_LOGIC_ACK,
	SERVO_ALL_OUT_LOGIC_END,
	SERVO_ALL_OUT_LOGIC_RESERVED0,
	SERVO_ALL_OUT_LOGIC_ORGSEARCHOK,
	SERVO_ALL_OUT_LOGIC_SERVOREADY,
	SERVO_ALL_OUT_LOGIC_RESERVED1,
	SERVO_ALL_OUT_LOGIC_BRAKE,
	SERVO_ALL_OUT_LOGIC_PTOUT0,
	SERVO_ALL_OUT_LOGIC_PTOUT1,
	SERVO_ALL_OUT_LOGIC_PTOUT2,
	SERVO_ALL_OUT_LOGIC_USEROUT0,
	SERVO_ALL_OUT_LOGIC_RESERVED2,
	SERVO_ALL_OUT_LOGIC_RESERVED3,
	SERVO_ALL_OUT_LOGIC_RESERVED4,
	SERVO_ALL_OUT_LOGIC_RESERVED5,
	SERVO_ALL_OUT_LOGIC_RESERVED6,
	SERVO_ALL_OUT_LOGIC_RESERVED7,
	SERVO_ALL_OUT_LOGIC_RESERVED8,
	SERVO_ALL_OUT_LOGIC_RESERVED9
} EZISERVO_ALL_OUTLOGIC_LIST;

typedef enum
{
	SERVO_ALL_ABS_OUT_PREASSIGN_COMP = 1,

	SERVO_ALL_ABS_OUT_LOGIC_INPOSITION,
	SERVO_ALL_ABS_OUT_LOGIC_ALARM,
	SERVO_ALL_ABS_OUT_LOGIC_MOVING,
	SERVO_ALL_ABS_OUT_LOGIC_ACCDEC,
	SERVO_ALL_ABS_OUT_LOGIC_ACK,
	SERVO_ALL_ABS_OUT_LOGIC_END,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED0,
	SERVO_ALL_ABS_OUT_LOGIC_ORGSEARCHOK,
	SERVO_ALL_ABS_OUT_LOGIC_SERVOREADY,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED1,
	SERVO_ALL_ABS_OUT_LOGIC_BRAKE,
	SERVO_ALL_ABS_OUT_LOGIC_PTOUT0,
	SERVO_ALL_ABS_OUT_LOGIC_PTOUT1,
	SERVO_ALL_ABS_OUT_LOGIC_PTOUT2,
	SERVO_ALL_ABS_OUT_LOGIC_PTOUT3,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED2,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED3,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED4,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED5,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED6,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED7,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED8,
	SERVO_ALL_ABS_OUT_LOGIC_RESERVED9
} EZISERVO_ALL_ABS_OUTLOGIC_LIST;

typedef enum
{
	STEP_ALL_OUT_PREASSIGN_COMP = 1,

	STEP_ALL_OUT_LOGIC_RESERVED0,
	STEP_ALL_OUT_LOGIC_ALARM,
	STEP_ALL_OUT_LOGIC_RUNSTOP,
	STEP_ALL_OUT_LOGIC_ACCDEC,
	STEP_ALL_OUT_LOGIC_ACK,
	STEP_ALL_OUT_LOGIC_END,
	STEP_ALL_OUT_LOGIC_ALARMBLINK,
	STEP_ALL_OUT_LOGIC_ORGSEARCHOK,
	STEP_ALL_OUT_LOGIC_RESERVED1,
	STEP_ALL_OUT_LOGIC_RESERVED2,
	STEP_ALL_OUT_LOGIC_BRAKE,
	STEP_ALL_OUT_LOGIC_PTOUT0,
	STEP_ALL_OUT_LOGIC_PTOUT1,
	STEP_ALL_OUT_LOGIC_PTOUT2,
	STEP_ALL_OUT_LOGIC_USEROUT0,
	STEP_ALL_OUT_LOGIC_RESERVED3,
	STEP_ALL_OUT_LOGIC_RESERVED4,
	STEP_ALL_OUT_LOGIC_RESERVED5,
	STEP_ALL_OUT_LOGIC_RESERVED6,
	STEP_ALL_OUT_LOGIC_RESERVED7,
	STEP_ALL_OUT_LOGIC_RESERVED8,
	STEP_ALL_OUT_LOGIC_RESERVED9,
	STEP_ALL_OUT_LOGIC_RESERVED10
} EZISTEP_ALL_OUTLOGIC_LIST;

typedef enum
{
	SERVO_MINI_OUT_PREASSIGN_COMP = 1,

	SERVO_MINI_OUT_LOGIC_INPOSITION,
	SERVO_MINI_OUT_LOGIC_ALARM,
	SERVO_MINI_OUT_LOGIC_MOVING,
	SERVO_MINI_OUT_LOGIC_ACCDEC,
	SERVO_MINI_OUT_LOGIC_ACK,
	SERVO_MINI_OUT_LOGIC_END,
	SERVO_MINI_OUT_LOGIC_RESERVED0,
	SERVO_MINI_OUT_LOGIC_ORGSEARCHOK,
	SERVO_MINI_OUT_LOGIC_SERVOREADY,
	SERVO_MINI_OUT_LOGIC_RESERVED1,
	SERVO_MINI_OUT_LOGIC_BRAKE,
	SERVO_MINI_OUT_LOGIC_PTOUT0,
	SERVO_MINI_OUT_LOGIC_PTOUT1,
	SERVO_MINI_OUT_LOGIC_PTOUT2,
	SERVO_MINI_OUT_LOGIC_USEROUT0,
	SERVO_MINI_OUT_LOGIC_RESERVED2,
	SERVO_MINI_OUT_LOGIC_RESERVED3,
	SERVO_MINI_OUT_LOGIC_RESERVED4,
	SERVO_MINI_OUT_LOGIC_RESERVED5,
	SERVO_MINI_OUT_LOGIC_RESERVED6,
	SERVO_MINI_OUT_LOGIC_RESERVED7,
	SERVO_MINI_OUT_LOGIC_RESERVED8,
	SERVO_MINI_OUT_LOGIC_RESERVED9
} EZISERVO_MINI_OUTLOGIC_LIST;

typedef enum
{
	STEP_MINI_OUT_PREASSIGN_COMP = 1,

	STEP_MINI_OUT_LOGIC_RESERVED0,
	STEP_MINI_OUT_LOGIC_ALARM,
	STEP_MINI_OUT_LOGIC_RUNSTOP,
	STEP_MINI_OUT_LOGIC_ACCDEC,
	STEP_MINI_OUT_LOGIC_ACK,
	STEP_MINI_OUT_LOGIC_END,
	STEP_MINI_OUT_LOGIC_ALARMBLINK,
	STEP_MINI_OUT_LOGIC_ORGSEARCHOK,
	STEP_MINI_OUT_LOGIC_RESERVED1,
	STEP_MINI_OUT_LOGIC_RESERVED2,
	STEP_MINI_OUT_LOGIC_BRAKE,
	STEP_MINI_OUT_LOGIC_PTOUT0,
	STEP_MINI_OUT_LOGIC_PTOUT1,
	STEP_MINI_OUT_LOGIC_PTOUT2,
	STEP_MINI_OUT_LOGIC_USEROUT0,
	STEP_MINI_OUT_LOGIC_RESERVED3,
	STEP_MINI_OUT_LOGIC_RESERVED4,
	STEP_MINI_OUT_LOGIC_RESERVED5,
	STEP_MINI_OUT_LOGIC_RESERVED6,
	STEP_MINI_OUT_LOGIC_RESERVED7,
	STEP_MINI_OUT_LOGIC_RESERVED8,
	STEP_MINI_OUT_LOGIC_RESERVED9,
	STEP_MINI_OUT_LOGIC_RESERVED10
} EZISTEP_MINI_OUTLOGIC_LIST;

//------------------------------------------------------------------
//                 Parameters Defines.
//------------------------------------------------------------------
#ifndef	PARAM_DEFINE
#define	PARAM_DEFINE

typedef enum
{
	SERVO_PULSEPERREVOLUTION = 0,
	SERVO_AXISMAXSPEED,
	SERVO_AXISSTARTSPEED,
	SERVO_AXISACCTIME,
	SERVO_AXISDECTIME,
	
	SERVO_SPEEDOVERRIDE,
	SERVO_JOGHIGHSPEED,
	SERVO_JOGLOWSPEED,
	SERVO_JOGACCDECTIME,
	
	SERVO_SERVOALARMLOGIC,
	SERVO_SERVOONLOGIC,
	SERVO_SERVORESETLOGIC,
	
	SERVO_SWLMTPLUSVALUE,
	SERVO_SWLMTMINUSVALUE,
	SERVO_SOFTLMTSTOPMETHOD,
	SERVO_HARDLMTSTOPMETHOD,
	SERVO_LIMITSENSORLOGIC,

	SERVO_ORGSPEED,
	SERVO_ORGSEARCHSPEED,
	SERVO_ORGACCDECTIME,
	SERVO_ORGMETHOD,
	SERVO_ORGDIR,
	SERVO_ORGOFFSET,
	SERVO_ORGPOSITIONSET,
	SERVO_ORGSENSORLOGIC,

	SERVO_POSITIONLOOPGAIN,
	SERVO_INPOSITIONVALUE,
	SERVO_POSTRACKINGLIMIT,
	SERVO_MOTIONDIR,

	SERVO_LIMITSENSORDIR,
	SERVO_ORGTORQUERATIO,

	SERVO_POSERROVERFLOWLIMIT,

	MAX_SERVO_PARAM

} FM_EZISERVO_PARAM;

typedef enum
{
	STEP_PULSEPERREVOLUTION = 0,
	STEP_AXISMAXSPEED,
	STEP_AXISSTARTSPEED,
	STEP_AXISACCTIME,
	STEP_AXISDECTIME,
	
	STEP_SPEEDOVERRIDE,
	STEP_JOGHIGHSPEED,
	STEP_JOGLOWSPEED,
	STEP_JOGACCDECTIME,
	
	STEP_ALARMLOGIC,
	STEP_RUNSTOPSIGNALLOGIC,		//SERVO_SERVOONLOGIC,
	STEP_RESETLOGIC,
	
	STEP_SWLMTPLUSVALUE,
	STEP_SWLMTMINUSVALUE,
	STEP_SOFTLMTSTOPMETHOD,
	STEP_HARDLMTSTOPMETHOD,
	STEP_LIMITSENSORLOGIC,

	STEP_ORGSPEED,
	STEP_ORGSEARCHSPEED,
	STEP_ORGACCDECTIME,
	STEP_ORGMETHOD,
	STEP_ORGDIR,
	STEP_ORGOFFSET,
	STEP_ORGPOSITIONSET,
	STEP_ORGSENSORLOGIC,

	STEP_STOPCURRENT,
	STEP_MOTIONDIR,

	STEP_LIMITSENSORDIR,
	STEP_ENCODERMULTIVALUE,

	STEP_ENCODERDIR,

	MAX_STEP_PARAM

} FM_EZISTEP_PARAM;

typedef enum
{
	MOTIONLINK_ENCODERMULTIPLY = 0,
	MOTIONLINK_AXISMAXSPEED,
	MOTIONLINK_AXISSTARTSPEED,
	MOTIONLINK_AXISACCTIME,
	MOTIONLINK_AXISDECTIME,
	
	MOTIONLINK_SPEEDOVERRIDE,
	MOTIONLINK_JOGHIGHSPEED,
	MOTIONLINK_JOGLOWSPEED,
	MOTIONLINK_JOGACCDECTIME,
	
	MOTIONLINK_EXTSERVOALARMLOGIC,
	MOTIONLINK_EXTSERVOONLOGIC,
	MOTIONLINK_EXTSERVORESETLOGIC,
	
	MOTIONLINK_SWLMTPLUSVALUE,
	MOTIONLINK_SWLMTMINUSVALUE,
	MOTIONLINK_SOFTLMTSTOPMETHOD,
	MOTIONLINK_HARDLMTSTOPMETHOD,
	MOTIONLINK_LIMITSENSORLOGIC,

	MOTIONLINK_ORGSPEED,
	MOTIONLINK_ORGSEARCHSPEED,
	MOTIONLINK_ORGACCDECTIME,
	MOTIONLINK_ORGMETHOD,
	MOTIONLINK_ORGDIR,
	MOTIONLINK_ORGOFFSET,
	MOTIONLINK_ORGPOSITIONSET,
	MOTIONLINK_ORGSENSORLOGIC,

	MOTIONLINK_LIMITSENSORDIR,
	MOTIONLINK_PULSETYPE,
	MOTIONLINK_ENCODERDIR,
	MOTIONLINK_MOTIONDIR,

	MOTIONLINK_SERVOALARMRESETLOGIC,
	MOTIONLINK_SERVOONOUTPUTLOGIC,
	MOTIONLINK_SERVOALARMLOGIC,

	MOTIONLINK_SERVOINPOSLOGIC,

	MOTIONLINK_SPARE2,
	MOTIONLINK_SPARE3,
	MOTIONLINK_SPARE4,
	MOTIONLINK_SPARE5,

	MAX_MOTIONLINK_PARAM

} FM_EZIMOTIONLINK_PARAM;

typedef enum
{
	SERVO_ALL_PULSEPERREVOLUTION = 0,
	SERVO_ALL_AXISMAXSPEED,
	SERVO_ALL_AXISSTARTSPEED,
	SERVO_ALL_AXISACCTIME,
	SERVO_ALL_AXISDECTIME,
	
	SERVO_ALL_SPEEDOVERRIDE,
	SERVO_ALL_JOGHIGHSPEED,
	SERVO_ALL_JOGLOWSPEED,
	SERVO_ALL_JOGACCDECTIME,
	
	SERVO_ALL_SERVOALARMLOGIC,
	SERVO_ALL_SERVOONLOGIC,
	SERVO_ALL_SERVORESETLOGIC,
	
	SERVO_ALL_SWLMTPLUSVALUE,
	SERVO_ALL_SWLMTMINUSVALUE,
	SERVO_ALL_SOFTLMTSTOPMETHOD,
	SERVO_ALL_HARDLMTSTOPMETHOD,
	SERVO_ALL_LIMITSENSORLOGIC,

	SERVO_ALL_ORGSPEED,
	SERVO_ALL_ORGSEARCHSPEED,
	SERVO_ALL_ORGACCDECTIME,
	SERVO_ALL_ORGMETHOD,
	SERVO_ALL_ORGDIR,
	SERVO_ALL_ORGOFFSET,
	SERVO_ALL_ORGPOSITIONSET,
	SERVO_ALL_ORGSENSORLOGIC,

	SERVO_ALL_POSITIONLOOPGAIN,
	SERVO_ALL_INPOSITIONVALUE,
	SERVO_ALL_POSTRACKINGLIMIT,
	SERVO_ALL_MOTIONDIR,

	SERVO_ALL_LIMITSENSORDIR,
	SERVO_ALL_ORGTORQUERATIO,

	SERVO_ALL_POSERROVERFLOWLIMIT,

	MAX_SERVO_ALL_PARAM

} FM_EZISERVO_ALL_PARAM;

typedef enum
{
	SERVO_ALL_ABS_PULSEPERREVOLUTION = 0,
	SERVO_ALL_ABS_AXISMAXSPEED,
	SERVO_ALL_ABS_AXISSTARTSPEED,
	SERVO_ALL_ABS_AXISACCTIME,
	SERVO_ALL_ABS_AXISDECTIME,
	
	SERVO_ALL_ABS_SPEEDOVERRIDE,
	SERVO_ALL_ABS_JOGHIGHSPEED,
	SERVO_ALL_ABS_JOGLOWSPEED,
	SERVO_ALL_ABS_JOGACCDECTIME,
	
	SERVO_ALL_ABS_SERVOALARMLOGIC,
	SERVO_ALL_ABS_SERVOONLOGIC,
	SERVO_ALL_ABS_SERVORESETLOGIC,
	
	SERVO_ALL_ABS_SWLMTPLUSVALUE,
	SERVO_ALL_ABS_SWLMTMINUSVALUE,
	SERVO_ALL_ABS_SOFTLMTSTOPMETHOD,
	SERVO_ALL_ABS_HARDLMTSTOPMETHOD,
	SERVO_ALL_ABS_LIMITSENSORLOGIC,

	SERVO_ALL_ABS_ORGSPEED,
	SERVO_ALL_ABS_ORGSEARCHSPEED,
	SERVO_ALL_ABS_ORGACCDECTIME,
	SERVO_ALL_ABS_ORGMETHOD,
	SERVO_ALL_ABS_ORGDIR,
	SERVO_ALL_ABS_ORGOFFSET,
	SERVO_ALL_ABS_ORGPOSITIONSET,
	SERVO_ALL_ABS_ORGSENSORLOGIC,

	SERVO_ALL_ABS_POSITIONLOOPGAIN,
	SERVO_ALL_ABS_INPOSITIONVALUE,
	SERVO_ALL_ABS_POSTRACKINGLIMIT,
	SERVO_ALL_ABS_MOTIONDIR,

	SERVO_ALL_ABS_LIMITSENSORDIR,
	SERVO_ALL_ABS_ORGTORQUERATIO,

	SERVO_ALL_ABS_POSERROVERFLOWLIMIT,

	MAX_SERVO_ALL_ABS_PARAM

} FM_EZISERVO_ALL_ABS_PARAM;

typedef enum
{
	STEP_ALL_PULSEPERREVOLUTION = 0,
	STEP_ALL_AXISMAXSPEED,
	STEP_ALL_AXISSTARTSPEED,
	STEP_ALL_AXISACCTIME,
	STEP_ALL_AXISDECTIME,
	
	STEP_ALL_SPEEDOVERRIDE,
	STEP_ALL_JOGHIGHSPEED,
	STEP_ALL_JOGLOWSPEED,
	STEP_ALL_JOGACCDECTIME,
	
	STEP_ALL_ALARMLOGIC,
	STEP_ALL_RUNSTOPSIGNALLOGIC,		//SERVO_SERVOONLOGIC,
	STEP_ALL_RESETLOGIC,
	
	STEP_ALL_SWLMTPLUSVALUE,
	STEP_ALL_SWLMTMINUSVALUE,
	STEP_ALL_SOFTLMTSTOPMETHOD,
	STEP_ALL_HARDLMTSTOPMETHOD,
	STEP_ALL_LIMITSENSORLOGIC,

	STEP_ALL_ORGSPEED,
	STEP_ALL_ORGSEARCHSPEED,
	STEP_ALL_ORGACCDECTIME,
	STEP_ALL_ORGMETHOD,
	STEP_ALL_ORGDIR,
	STEP_ALL_ORGOFFSET,
	STEP_ALL_ORGPOSITIONSET,
	STEP_ALL_ORGSENSORLOGIC,

	STEP_ALL_STOPCURRENT,
	STEP_ALL_MOTIONDIR,

	STEP_ALL_LIMITSENSORDIR,
	STEP_ALL_ENCODERMULTIVALUE,

	STEP_ALL_ENCODERDIR,

	MAX_STEP_ALL_PARAM

} FM_EZISTEP_ALL_PARAM;

typedef enum
{
	SERVO_MINI_PULSEPERREVOLUTION = 0,
	SERVO_MINI_AXISMAXSPEED,
	SERVO_MINI_AXISSTARTSPEED,
	SERVO_MINI_AXISACCTIME,
	SERVO_MINI_AXISDECTIME,
	
	SERVO_MINI_SPEEDOVERRIDE,
	SERVO_MINI_JOGHIGHSPEED,
	SERVO_MINI_JOGLOWSPEED,
	SERVO_MINI_JOGACCDECTIME,
	
	SERVO_MINI_SERVOALARMLOGIC,
	SERVO_MINI_SERVOONLOGIC,
	SERVO_MINI_SERVORESETLOGIC,
	
	SERVO_MINI_SWLMTPLUSVALUE,
	SERVO_MINI_SWLMTMINUSVALUE,
	SERVO_MINI_SOFTLMTSTOPMETHOD,
	SERVO_MINI_HARDLMTSTOPMETHOD,
	SERVO_MINI_LIMITSENSORLOGIC,

	SERVO_MINI_ORGSPEED,
	SERVO_MINI_ORGSEARCHSPEED,
	SERVO_MINI_ORGACCDECTIME,
	SERVO_MINI_ORGMETHOD,
	SERVO_MINI_ORGDIR,
	SERVO_MINI_ORGOFFSET,
	SERVO_MINI_ORGPOSITIONSET,
	SERVO_MINI_ORGSENSORLOGIC,

	SERVO_MINI_POSITIONLOOPGAIN,
	SERVO_MINI_INPOSITIONVALUE,
	SERVO_MINI_POSTRACKINGLIMIT,
	SERVO_MINI_MOTIONDIR,

	SERVO_MINI_LIMITSENSORDIR,
	SERVO_MINI_ORGTORQUERATIO,

	SERVO_MINI_POSERROVERFLOWLIMIT,

	MAX_SERVO_MINI_PARAM

} FM_EZISERVO_MINI_PARAM;

typedef enum
{
	STEP_MINI_PULSEPERREVOLUTION = 0,
	STEP_MINI_AXISMAXSPEED,
	STEP_MINI_AXISSTARTSPEED,
	STEP_MINI_AXISACCTIME,
	STEP_MINI_AXISDECTIME,
	
	STEP_MINI_SPEEDOVERRIDE,
	STEP_MINI_JOGHIGHSPEED,
	STEP_MINI_JOGLOWSPEED,
	STEP_MINI_JOGACCDECTIME,
	
	STEP_MINI_ALARMLOGIC,
	STEP_MINI_RUNSTOPSIGNALLOGIC,		//SERVO_SERVOONLOGIC,
	STEP_MINI_RESETLOGIC,
	
	STEP_MINI_SWLMTPLUSVALUE,
	STEP_MINI_SWLMTMINUSVALUE,
	STEP_MINI_SOFTLMTSTOPMETHOD,
	STEP_MINI_HARDLMTSTOPMETHOD,
	STEP_MINI_LIMITSENSORLOGIC,

	STEP_MINI_ORGSPEED,
	STEP_MINI_ORGSEARCHSPEED,
	STEP_MINI_ORGACCDECTIME,
	STEP_MINI_ORGMETHOD,
	STEP_MINI_ORGDIR,
	STEP_MINI_ORGOFFSET,
	STEP_MINI_ORGPOSITIONSET,
	STEP_MINI_ORGSENSORLOGIC,

	STEP_MINI_STOPCURRENT,
	STEP_MINI_MOTIONDIR,

	STEP_MINI_LIMITSENSORDIR,
	STEP_MINI_ENCODERMULTIVALUE,

	STEP_MINI_ENCODERDIR,

	MAX_STEP_MINI_PARAM

} FM_EZISTEP_MINI_PARAM;

#endif	//PARAM_DEFINE

//------------------------------------------------------------------
//                 FRAME TYPE Defines.
//------------------------------------------------------------------
static const BYTE	FRAME_GETSLAVEINFO			= 0x01;
static const BYTE	FRAME_GETMOTORINFO			= 0x05;
static const BYTE	FRAME_GETENCODER			= 0x06;

static const BYTE	FRAME_GETFIRMWAREINFO		= 0x07;

static const BYTE	FRAME_STEPGETCURRENT		= 0x0B;		// Factory, Distributor only
static const BYTE	FRAME_STEPSETCURRENT		= 0x0C;		// Factory, Distributor only
static const BYTE	FRAME_STEPVERSION			= 0x0D;		// Factory, Distributor only
static const BYTE	FRAME_STEPGETMOTORDB		= 0x0E;		// Factory, Distributor only
static const BYTE	FRAME_STEPSETMOTORDB		= 0x0F;		// Factory, Distributor only

static const BYTE	FRAME_FAS_SAVEALLPARAM		= 0x10;
static const BYTE	FRAME_FAS_GETROMPARAM		= 0x11;
static const BYTE	FRAME_FAS_SETPARAMETER		= 0x12;
static const BYTE	FRAME_FAS_GETPARAMETER		= 0x13;

static const BYTE	FRAME_FAS_SETIO_OUTPUT		= 0x20;
static const BYTE	FRAME_FAS_SETIO_INPUT		= 0x21;
static const BYTE	FRAME_FAS_GETIO_INPUT		= 0x22;
static const BYTE	FRAME_FAS_GETIO_OUTPUT		= 0x23;

static const BYTE	FRAME_FAS_SET_IO_ASSGN_MAP	= 0x24;
static const BYTE	FRAME_FAS_GET_IO_ASSGN_MAP	= 0x25;
static const BYTE	FRAME_FAS_IO_ASSGN_MAP_READROM	= 0x26;

static const BYTE	FRAME_FAS_SERVOENABLE		= 0x2A;
static const BYTE	FRAME_FAS_ALARMRESET		= 0x2B;
static const BYTE	FRAME_FAS_STEPALARMRESET	= 0x2C;	// Step Alarm Reset function.

static const BYTE	FRAME_FAS_GETALARMTYPE		= 0x2E;	// Alarm Type

static const BYTE	FRAME_FAS_GETAXISSTATUS		= 0x40;
static const BYTE	FRAME_FAS_GETIOAXISSTATUS	= 0x41;
static const BYTE	FRAME_FAS_GETMOTIONSTATUS	= 0x42;
static const BYTE	FRAME_FAS_GETALLSTATUS		= 0x43;

static const BYTE	FRAME_FAS_ISMOTIONING		= 0x30;

static const BYTE	FRAME_FAS_SETCMDPOS			= 0x50;
static const BYTE	FRAME_FAS_GETCMDPOS			= 0x51;
static const BYTE	FRAME_FAS_SETACTPOS			= 0x52;
static const BYTE	FRAME_FAS_GETACTPOS			= 0x53;
static const BYTE	FRAME_FAS_GETPOSERR			= 0x54;
static const BYTE	FRAME_FAS_GETACTVEL			= 0x55;
static const BYTE	FRAME_FAS_CLEARPOS			= 0x56;

static const BYTE	FRAME_FAS_MOVESTOP			= 0x31;
static const BYTE	FRAME_FAS_EMERGENCYSTOP		= 0x32;

static const BYTE	FRAME_FAS_MOVEORIGIN		= 0x33;
static const BYTE	FRAME_FAS_MOVESINGLEABS		= 0x34;
static const BYTE	FRAME_FAS_MOVESINGLEINC		= 0x35;
static const BYTE	FRAME_FAS_MOVETOLIMIT		= 0x36;
static const BYTE	FRAME_FAS_MOVEVELOCITY		= 0x37;

static const BYTE	FRAME_FAS_POSABSOVERRIDE	= 0x38;
static const BYTE	FRAME_FAS_POSINCOVERRIDE	= 0x39;
static const BYTE	FRAME_FAS_VELOVERRIDE		= 0x3A;

static const BYTE	FRAME_FAS_ALLMOVESTOP		= 0x3B;
static const BYTE	FRAME_FAS_ALLEMERGENCYSTOP	= 0x3C;
static const BYTE	FRAME_FAS_ALLMOVEORIGIN		= 0x3D;
static const BYTE	FRAME_FAS_ALLMOVESINGLEABS	= 0x3E;
static const BYTE	FRAME_FAS_ALLMOVESINGLEINC	= 0x3F;

// Position Table specific commands.

static const BYTE	FRAME_FAS_POSTAB_READ_ITEM		= 0x60;
static const BYTE	FRAME_FAS_POSTAB_WRITE_ITEM		= 0x61;
static const BYTE	FRAME_FAS_POSTAB_READ_ROM		= 0x62;
static const BYTE	FRAME_FAS_POSTAB_WRITE_ROM		= 0x63;
static const BYTE	FRAME_FAS_POSTAB_RUN_ITEM		= 0x64;
static const BYTE	FRAME_FAS_POSTAB_IS_DATA		= 0x65;

static const BYTE	FRAME_FAS_POSTAB_RUN_ONEITEM	= 0x68;
static const BYTE	FRAME_FAS_POSTAB_CHECK_STOPMODE	= 0x69;
// Hidden Parameter commands.

static const BYTE	FRAME_FAS_GET_HIDDEN_PARAM		= 0x66;
static const BYTE	FRAME_FAS_SET_HIDDEN_PARAM		= 0x67;

static const BYTE	FRAME_FAS_POSTAB_READ_ONEITEM	= 0x6A;
static const BYTE	FRAME_FAS_POSTAB_WRITE_ONEITEM	= 0x6B;

static const BYTE	FRAME_FAS_SETLINEARINFO			= 0x70;
static const BYTE	FRAME_FAS_MOVELINEARINC			= 0x71;

// Ex-Motion Commands
static const BYTE	FRAME_FAS_MOVESINGLEABS_EX		= 0x80;
static const BYTE	FRAME_FAS_MOVESINGLEINC_EX		= 0x81;
static const BYTE	FRAME_FAS_MOVEVELOCITY_EX		= 0x82;

// Calibration Commands.
static const BYTE	FRAME_FAS_STARTCALIBRATION		= 0x90;
static const BYTE	FRAME_FAS_GETCALIBRATIONRESULT	= 0x91;
static const BYTE	FRAME_FAS_SETCALIBRATIONDATA	= 0x92;

// ROM Writing Commands
static const BYTE	FRAME_ISROMERASED				= 0x1A;
static const BYTE	FRAME_ISRUNROMEXIST				= 0x1B;
static const BYTE	FRAME_ERASEFLASH				= 0x1C;
static const BYTE	FRAME_WRITEFLASH				= 0x1D;
static const BYTE	FRAME_REBOOTBOOTROM				= 0x1E;
static const BYTE	FRAME_REBOOTRUNROM				= 0x1F;


static const BYTE	SLAVE_ALL_COMMAND				= 99;

//------------------------------------------------------------------
//                 POSITION TABLE Defines.
//------------------------------------------------------------------
static const WORD	MAX_LOOP_COUNT =	100;
static const WORD	MAX_WAIT_TIME =		60000;

typedef enum
{
	CMD_ABS_LOWSPEED = 0,
	CMD_ABS_HIGHSPEED,
	CMD_ABS_HIGHSPEEDDECEL,
	CMD_ABS_NORMALMOTION,
	CMD_INC_LOWSPEED,
	CMD_INC_HIGHSPEED,
	CMD_INC_HIGHSPEEDDECEL,
	CMD_INC_NORMALMOTION,
	CMD_MOVE_ORIGIN,
	CMD_COUNTERCLEAR,
	CMD_MAX_COUNT
} COMMAND_LIST;

#ifndef	DEFINE_ITEM_NODE
#define DEFINE_ITEM_NODE

#pragma pack(2)

typedef union
{
	WORD	wBuffer[32];		// 64 bytes

	struct
	{
		LONG	lPosition;
		
		DWORD	dwStartSpd;
		DWORD	dwMoveSpd;
		
		WORD	wAccelRate;
		WORD	wDecelRate;
		
		WORD	wCommand;
		WORD	wWaitTime;
		WORD	wContinuous;
		WORD	wBranch;
		
		WORD	wCond_branch0;
		WORD	wCond_branch1;
		WORD	wCond_branch2;
		WORD	wLoopCount;
		WORD	wBranchAfterLoop;
		WORD	wPTSet;
		WORD	wLoopCountCLR;

		WORD	bCheckInpos;		// 0 : Check Inpos, 1 : Don't Check.
	};
} ITEM_NODE, *LPITEM_NODE;

#pragma pack()

#endif

static const WORD	OFFSET_POSITION		= 0;
static const WORD	OFFSET_LOWSPEED		= 4;
static const WORD	OFFSET_HIGHSPEED	= 8;
static const WORD	OFFSET_ACCELTIME	= 12;
static const WORD	OFFSET_DECELTIME	= 14;
static const WORD	OFFSET_COMMAND		= 16;
static const WORD	OFFSET_WAITTIME		= 18;
static const WORD	OFFSET_CONTINUOUS	= 20;
static const WORD	OFFSET_JUMPTABLENO	= 22;
static const WORD	OFFSET_JUMPPT0		= 24;
static const WORD	OFFSET_JUMPPT1		= 26;
static const WORD	OFFSET_JUMPPT2		= 28;
static const WORD	OFFSET_LOOPCOUNT		= 30;
static const WORD	OFFSET_LOOPJUMPTABLENO	= 32;
static const WORD	OFFSET_PTSET			= 34;
static const WORD	OFFSET_LOOPCOUNTCLEAR	= 36;
static const WORD	OFFSET_CHECKINPOSITION	= 38;
static const WORD	OFFSET_BLANK			= 40;

//------------------------------------------------------------------
//                 EX Commands Option Defines.
//------------------------------------------------------------------
#pragma pack(1)

typedef union
{
	BYTE	byBuffer[32];

	struct
	{
		union
		{
			DWORD dwOptionFlag;
			struct
			{
				unsigned BIT_IGNOREEXSTOP	: 1;
				
				unsigned BIT_USE_CUSTOMACCEL	: 1;
				unsigned BIT_USE_CUSTOMDECEL	: 1;
				
				//unsigned BITS_RESERVED	: 13;
			};
		} flagOption;

		WORD	wCustomAccelTime;
		WORD	wCustomDecelTime;

		//BYTE	buffReserved[24];
	};
} MOTION_OPTION_EX;

typedef union
{
	BYTE	byBuffer[32];

	struct
	{
		union
		{
			DWORD dwOptionFlag;
			struct
			{
				unsigned BIT_IGNOREEXSTOP	: 1;
				unsigned BIT_USE_CUSTOMACCDEC	: 1;
				
				//unsigned BITS_RESERVED	: 14;
			};
		} flagOption;

		WORD	wCustomAccDecTime;

		//BYTE	buffReserved[26];
	};
} VELOCITY_OPTION_EX;

#pragma pack()

//------------------------------------------------------------------
//                 Alarm Type Defines.
//------------------------------------------------------------------
typedef enum
{
	ALARM_NONE = 0,

	/*  1 */ ALARM_OVERCURRENT,
	/*  2 */ ALARM_OVERSPEED,
	/*  3 */ ALARM_STEPOUT,
	/*  4 */ ALARM_OVERLOAD,
	/*  5 */ ALARM_OVERTEMPERATURE,
	/*  6 */ ALARM_OVERBACKEMF,
	/*  7 */ ALARM_MOTORCONNECT,
	/*  8 */ ALARM_ENCODERCONNECT,
	/*  9 */ ALARM_LOWMOTORPOWER,
	/* 10 */ ALARM_INPOSITION,
	/* 11 */ ALARM_SYSTEMHALT,
	/* 12 */ ALARM_ROMDEVICE,
	/* 13 */ ALARM_RESERVED0,
	/* 14 */ ALARM_HIGHINPUTVOLTAGE,
	/* 15 */ ALARM_POSITIONOVERFLOW,

	MAX_ALARM_NUM
} ALARM_TYPE;

static const char* ALARM_DESCRIPTION[] = 
{
	NULL,
	"Over Current",
	"Over Speed",
	"Position Tracking",
	"Over Load",
	"Over Temperature",
	"Over Back EMF",
	"No Motor Connect",
	"No Encoder Connect",
	"Low Motor Power",
	"Inposition Error",
	"System Halt",
	"ROM Device Error",
	NULL,
	"High Input Voltage",
	"Position Overflow"
};
